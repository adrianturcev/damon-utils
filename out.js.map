{
  "version": 3,
  "sources": ["node_modules/dompurify/dist/purify.cjs.js", "DamonUtils.js", "main.js"],
  "sourcesContent": ["/*! @license DOMPurify 3.2.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.4/LICENSE */\n\n'use strict';\n\nconst {\n  entries,\n  setPrototypeOf,\n  isFrozen,\n  getPrototypeOf,\n  getOwnPropertyDescriptor\n} = Object;\nlet {\n  freeze,\n  seal,\n  create\n} = Object; // eslint-disable-line import/no-mutable-exports\nlet {\n  apply,\n  construct\n} = typeof Reflect !== 'undefined' && Reflect;\nif (!freeze) {\n  freeze = function freeze(x) {\n    return x;\n  };\n}\nif (!seal) {\n  seal = function seal(x) {\n    return x;\n  };\n}\nif (!apply) {\n  apply = function apply(fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\nif (!construct) {\n  construct = function construct(Func, args) {\n    return new Func(...args);\n  };\n}\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst arraySplice = unapply(Array.prototype.splice);\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringToString = unapply(String.prototype.toString);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\nconst objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\nconst regExpTest = unapply(RegExp.prototype.test);\nconst typeErrorCreate = unconstruct(TypeError);\n/**\n * Creates a new function that calls the given function with a specified thisArg and arguments.\n *\n * @param func - The function to be wrapped and called.\n * @returns A new function that calls the given function with a specified thisArg and arguments.\n */\nfunction unapply(func) {\n  return function (thisArg) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return apply(func, thisArg, args);\n  };\n}\n/**\n * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n *\n * @param func - The constructor function to be wrapped and called.\n * @returns A new function that constructs an instance of the given constructor function with the provided arguments.\n */\nfunction unconstruct(func) {\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return construct(func, args);\n  };\n}\n/**\n * Add properties to a lookup table\n *\n * @param set - The set to which elements will be added.\n * @param array - The array containing elements to be added to the set.\n * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n * @returns The modified set with added elements.\n */\nfunction addToSet(set, array) {\n  let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n  let l = array.length;\n  while (l--) {\n    let element = array[l];\n    if (typeof element === 'string') {\n      const lcElement = transformCaseFunc(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          array[l] = lcElement;\n        }\n        element = lcElement;\n      }\n    }\n    set[element] = true;\n  }\n  return set;\n}\n/**\n * Clean up an array to harden against CSPP\n *\n * @param array - The array to be cleaned.\n * @returns The cleaned version of the array\n */\nfunction cleanArray(array) {\n  for (let index = 0; index < array.length; index++) {\n    const isPropertyExist = objectHasOwnProperty(array, index);\n    if (!isPropertyExist) {\n      array[index] = null;\n    }\n  }\n  return array;\n}\n/**\n * Shallow clone an object\n *\n * @param object - The object to be cloned.\n * @returns A new object that copies the original.\n */\nfunction clone(object) {\n  const newObject = create(null);\n  for (const [property, value] of entries(object)) {\n    const isPropertyExist = objectHasOwnProperty(object, property);\n    if (isPropertyExist) {\n      if (Array.isArray(value)) {\n        newObject[property] = cleanArray(value);\n      } else if (value && typeof value === 'object' && value.constructor === Object) {\n        newObject[property] = clone(value);\n      } else {\n        newObject[property] = value;\n      }\n    }\n  }\n  return newObject;\n}\n/**\n * This method automatically checks if the prop is function or getter and behaves accordingly.\n *\n * @param object - The object to look up the getter function in its prototype chain.\n * @param prop - The property name for which to find the getter function.\n * @returns The getter function found in the prototype chain or a fallback function.\n */\nfunction lookupGetter(object, prop) {\n  while (object !== null) {\n    const desc = getOwnPropertyDescriptor(object, prop);\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n    object = getPrototypeOf(object);\n  }\n  function fallbackValue() {\n    return null;\n  }\n  return fallbackValue;\n}\n\nconst html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);\nconst svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\nconst svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\n// List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\nconst svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\nconst mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']);\n// Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\nconst mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\nconst text = freeze(['#text']);\n\nconst html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'popover', 'popovertarget', 'popovertargetaction', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wrap', 'xmlns', 'slot']);\nconst svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'amplitude', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'exponent', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'slope', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'tablevalues', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\nconst mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\nconst xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n// eslint-disable-next-line unicorn/better-regex\nconst MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nconst ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\nconst TMPLIT_EXPR = seal(/\\$\\{[\\w\\W]*/gm); // eslint-disable-line unicorn/better-regex\nconst DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]+$/); // eslint-disable-line no-useless-escape\nconst ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nconst IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nconst IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nconst ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\nconst DOCTYPE_NAME = seal(/^html$/i);\nconst CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n\nvar EXPRESSIONS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ARIA_ATTR: ARIA_ATTR,\n  ATTR_WHITESPACE: ATTR_WHITESPACE,\n  CUSTOM_ELEMENT: CUSTOM_ELEMENT,\n  DATA_ATTR: DATA_ATTR,\n  DOCTYPE_NAME: DOCTYPE_NAME,\n  ERB_EXPR: ERB_EXPR,\n  IS_ALLOWED_URI: IS_ALLOWED_URI,\n  IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n  MUSTACHE_EXPR: MUSTACHE_EXPR,\n  TMPLIT_EXPR: TMPLIT_EXPR\n});\n\n/* eslint-disable @typescript-eslint/indent */\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\nconst NODE_TYPE = {\n  element: 1,\n  attribute: 2,\n  text: 3,\n  cdataSection: 4,\n  entityReference: 5,\n  // Deprecated\n  entityNode: 6,\n  // Deprecated\n  progressingInstruction: 7,\n  comment: 8,\n  document: 9,\n  documentType: 10,\n  documentFragment: 11,\n  notation: 12 // Deprecated\n};\nconst getGlobal = function getGlobal() {\n  return typeof window === 'undefined' ? null : window;\n};\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param trustedTypes The policy factory.\n * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n * @return The policy created (or null, if Trusted Types\n * are not supported or creating the policy failed).\n */\nconst _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n  if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n    return null;\n  }\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n    suffix = purifyHostElement.getAttribute(ATTR_NAME);\n  }\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n      createScriptURL(scriptUrl) {\n        return scriptUrl;\n      }\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n    return null;\n  }\n};\nconst _createHooksMap = function _createHooksMap() {\n  return {\n    afterSanitizeAttributes: [],\n    afterSanitizeElements: [],\n    afterSanitizeShadowDOM: [],\n    beforeSanitizeAttributes: [],\n    beforeSanitizeElements: [],\n    beforeSanitizeShadowDOM: [],\n    uponSanitizeAttribute: [],\n    uponSanitizeElement: [],\n    uponSanitizeShadowNode: []\n  };\n};\nfunction createDOMPurify() {\n  let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n  const DOMPurify = root => createDOMPurify(root);\n  DOMPurify.version = '3.2.4';\n  DOMPurify.removed = [];\n  if (!window || !window.document || window.document.nodeType !== NODE_TYPE.document || !window.Element) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n    return DOMPurify;\n  }\n  let {\n    document\n  } = window;\n  const originalDocument = document;\n  const currentScript = originalDocument.currentScript;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    Element,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n    HTMLFormElement,\n    DOMParser,\n    trustedTypes\n  } = window;\n  const ElementPrototype = Element.prototype;\n  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  const remove = lookupGetter(ElementPrototype, 'remove');\n  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n  let trustedTypesPolicy;\n  let emptyHTML = '';\n  const {\n    implementation,\n    createNodeIterator,\n    createDocumentFragment,\n    getElementsByTagName\n  } = document;\n  const {\n    importNode\n  } = originalDocument;\n  let hooks = _createHooksMap();\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    TMPLIT_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE,\n    CUSTOM_ELEMENT\n  } = EXPRESSIONS;\n  let {\n    IS_ALLOWED_URI: IS_ALLOWED_URI$1\n  } = EXPRESSIONS;\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n  /* allowed element names */\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);\n  /* Allowed attribute names */\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);\n  /*\n   * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.\n   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n   */\n  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {\n    tagNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    attributeNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    allowCustomizedBuiltInElements: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: false\n    }\n  }));\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  let FORBID_TAGS = null;\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  let FORBID_ATTR = null;\n  /* Decide if ARIA attributes are okay */\n  let ALLOW_ARIA_ATTR = true;\n  /* Decide if custom data attributes are okay */\n  let ALLOW_DATA_ATTR = true;\n  /* Decide if unknown protocols are okay */\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n  /* Decide if self-closing tags in attributes are allowed.\n   * Usually removed due to a mXSS issue in jQuery 3.0 */\n  let ALLOW_SELF_CLOSE_IN_ATTR = true;\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  let SAFE_FOR_TEMPLATES = false;\n  /* Output should be safe even for XML used within HTML and alike.\n   * This means, DOMPurify removes comments when containing risky content.\n   */\n  let SAFE_FOR_XML = true;\n  /* Decide if document with <html>... should be returned */\n  let WHOLE_DOCUMENT = false;\n  /* Track whether config is already set on this instance of DOMPurify. */\n  let SET_CONFIG = false;\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  let FORCE_BODY = false;\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  let RETURN_DOM = false;\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  let RETURN_DOM_FRAGMENT = false;\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n  let RETURN_TRUSTED_TYPE = false;\n  /* Output should be free from DOM clobbering attacks?\n   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n   */\n  let SANITIZE_DOM = true;\n  /* Achieve full DOM Clobbering protection by isolating the namespace of named\n   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n   *\n   * HTML/DOM spec rules that enable DOM Clobbering:\n   *   - Named Access on Window (\u00A77.3.3)\n   *   - DOM Tree Accessors (\u00A73.1.5)\n   *   - Form Element Parent-Child Relations (\u00A74.10.3)\n   *   - Iframe srcdoc / Nested WindowProxies (\u00A74.8.5)\n   *   - HTMLCollection (\u00A74.2.10.2)\n   *\n   * Namespace isolation is implemented by prefixing `id` and `name` attributes\n   * with a constant string, i.e., `user-content-`\n   */\n  let SANITIZE_NAMED_PROPS = false;\n  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n  /* Keep element content when removing element? */\n  let KEEP_CONTENT = true;\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  let IN_PLACE = false;\n  /* Allow usage of profiles like html, svg and mathMl */\n  let USE_PROFILES = {};\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  let FORBID_CONTENTS = null;\n  const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n  /* Tags that are safe for data: URIs */\n  let DATA_URI_TAGS = null;\n  const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n  /* Attributes safe for values like \"javascript:\" */\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n  /* Document namespace */\n  let NAMESPACE = HTML_NAMESPACE;\n  let IS_EMPTY_INPUT = false;\n  /* Allowed XHTML+XML namespaces */\n  let ALLOWED_NAMESPACES = null;\n  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n  let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);\n  // Certain elements are allowed in both SVG and HTML\n  // namespace. We need to specify them explicitly\n  // so that they don't get erroneously deleted from\n  // HTML namespace.\n  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n  /* Parsing of strict XHTML documents */\n  let PARSER_MEDIA_TYPE = null;\n  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n  let transformCaseFunc = null;\n  /* Keep a reference to config to pass to hooks */\n  let CONFIG = null;\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n  const formElement = document.createElement('form');\n  const isRegexOrFunction = function isRegexOrFunction(testValue) {\n    return testValue instanceof RegExp || testValue instanceof Function;\n  };\n  /**\n   * _parseConfig\n   *\n   * @param cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  const _parseConfig = function _parseConfig() {\n    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n    /* Shield configuration object from tampering */\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n    /* Shield configuration object from prototype pollution */\n    cfg = clone(cfg);\n    PARSER_MEDIA_TYPE =\n    // eslint-disable-next-line unicorn/prefer-includes\n    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;\n    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n    /* Set configuration parameters */\n    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;\n    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n    MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;\n    HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;\n    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n    }\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n    }\n    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n    }\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, text);\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, html$1);\n        addToSet(ALLOWED_ATTR, html);\n      }\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, svg$1);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, svgFilters);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, mathMl$1);\n        addToSet(ALLOWED_ATTR, mathMl);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n    }\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n    }\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n    }\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n    }\n    if (cfg.FORBID_CONTENTS) {\n      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n        FORBID_CONTENTS = clone(FORBID_CONTENTS);\n      }\n      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n    }\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n    if (cfg.TRUSTED_TYPES_POLICY) {\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n      }\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n      }\n      // Overwrite existing TrustedTypes policy.\n      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n      // Sign local variables required by `sanitize`.\n      emptyHTML = trustedTypesPolicy.createHTML('');\n    } else {\n      // Uninitialized policy, attempt to initialize the internal dompurify policy.\n      if (trustedTypesPolicy === undefined) {\n        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n      }\n      // If creating the internal policy succeeded sign internal variables.\n      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      }\n    }\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n    CONFIG = cfg;\n  };\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);\n  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);\n  /**\n   * @param element a DOM element whose namespace is being checked\n   * @returns Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n  const _checkValidNamespace = function _checkValidNamespace(element) {\n    let parent = getParentNode(element);\n    // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: NAMESPACE,\n        tagName: 'template'\n      };\n    }\n    const tagName = stringToLowerCase(element.tagName);\n    const parentTagName = stringToLowerCase(parent.tagName);\n    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return false;\n    }\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      }\n      // The only way to switch from MathML to SVG is via`\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n      }\n      // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      }\n      // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      }\n      // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n      // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n    }\n    // For XHTML and XML documents that support custom namespaces\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return true;\n    }\n    // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n    // Return false just in case.\n    return false;\n  };\n  /**\n   * _forceRemove\n   *\n   * @param node a DOM node\n   */\n  const _forceRemove = function _forceRemove(node) {\n    arrayPush(DOMPurify.removed, {\n      element: node\n    });\n    try {\n      // eslint-disable-next-line unicorn/prefer-dom-node-remove\n      getParentNode(node).removeChild(node);\n    } catch (_) {\n      remove(node);\n    }\n  };\n  /**\n   * _removeAttribute\n   *\n   * @param name an Attribute name\n   * @param element a DOM node\n   */\n  const _removeAttribute = function _removeAttribute(name, element) {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: element.getAttributeNode(name),\n        from: element\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: element\n      });\n    }\n    element.removeAttribute(name);\n    // We void attribute values for unremovable \"is\" attributes\n    if (name === 'is') {\n      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n        try {\n          _forceRemove(element);\n        } catch (_) {}\n      } else {\n        try {\n          element.setAttribute(name, '');\n        } catch (_) {}\n      }\n    }\n  };\n  /**\n   * _initDocument\n   *\n   * @param dirty - a string of dirty markup\n   * @return a DOM, filled with the dirty markup\n   */\n  const _initDocument = function _initDocument(dirty) {\n    /* Create a HTML document */\n    let doc = null;\n    let leadingWhitespace = null;\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n      dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n    }\n    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n    /*\n     * Use the DOMParser API by default, fallback later if needs be\n     * DOMParser not work for svg when has multiple root element.\n     */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n      } catch (_) {}\n    }\n    /* Use createHTMLDocument in case DOMParser is not available */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createDocument(NAMESPACE, 'template', null);\n      try {\n        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n      } catch (_) {\n        // Syntax error if dirtyPayload is invalid xml\n      }\n    }\n    const body = doc.body || doc.documentElement;\n    if (dirty && leadingWhitespace) {\n      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n    }\n    /* Work on whole document or just its body */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n    }\n    return WHOLE_DOCUMENT ? doc.documentElement : body;\n  };\n  /**\n   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n   *\n   * @param root The root element or node to start traversing on.\n   * @return The created NodeIterator\n   */\n  const _createNodeIterator = function _createNodeIterator(root) {\n    return createNodeIterator.call(root.ownerDocument || root, root,\n    // eslint-disable-next-line no-bitwise\n    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);\n  };\n  /**\n   * _isClobbered\n   *\n   * @param element element to check for clobbering attacks\n   * @return true if clobbered, false if safe\n   */\n  const _isClobbered = function _isClobbered(element) {\n    return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');\n  };\n  /**\n   * Checks whether the given object is a DOM node.\n   *\n   * @param value object to check whether it's a DOM node\n   * @return true is object is a DOM node\n   */\n  const _isNode = function _isNode(value) {\n    return typeof Node === 'function' && value instanceof Node;\n  };\n  function _executeHooks(hooks, currentNode, data) {\n    arrayForEach(hooks, hook => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  }\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   * @param currentNode to check for permission to exist\n   * @return true if node was killed, false if left alive\n   */\n  const _sanitizeElements = function _sanitizeElements(currentNode) {\n    let content = null;\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Now let's check the element's type and name */\n    const tagName = transformCaseFunc(currentNode.nodeName);\n    /* Execute a hook if present */\n    _executeHooks(hooks.uponSanitizeElement, currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS\n    });\n    /* Detect mXSS attempts abusing namespace confusion */\n    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Remove any occurrence of processing instructions */\n    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Remove any kind of possibly harmful comments */\n    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\\w]/g, currentNode.data)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Check if we have a custom element to handle */\n      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {\n          return false;\n        }\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {\n          return false;\n        }\n      }\n      /* Keep content except for bad-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n        if (childNodes && parentNode) {\n          const childCount = childNodes.length;\n          for (let i = childCount - 1; i >= 0; --i) {\n            const childClone = cloneNode(childNodes[i], true);\n            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n            parentNode.insertBefore(childClone, getNextSibling(currentNode));\n          }\n        }\n      }\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Check whether element has a valid namespace */\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Make sure that older browsers don't get fallback-tag mXSS */\n    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n        content = stringReplace(content, expr, ' ');\n      });\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, {\n          element: currentNode.cloneNode()\n        });\n        currentNode.textContent = content;\n      }\n    }\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeElements, currentNode, null);\n    return false;\n  };\n  /**\n   * _isValidAttribute\n   *\n   * @param lcTag Lowercase tag name of containing element.\n   * @param lcName Lowercase attribute name.\n   * @param value Attribute value.\n   * @return Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n      return false;\n    }\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      if (\n      // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n      _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||\n      // Alternative, second condition checks if it's an `is`-attribute, AND\n      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n        return false;\n      }\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {\n      return false;\n    } else ;\n    return true;\n  };\n  /**\n   * _isBasicCustomElement\n   * checks if at least one dash is included in tagName, and it's not the first char\n   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n   *\n   * @param tagName name of the tag of the node to sanitize\n   * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n   */\n  const _isBasicCustomElement = function _isBasicCustomElement(tagName) {\n    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n  };\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param currentNode to sanitize\n   */\n  const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);\n    const {\n      attributes\n    } = currentNode;\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes || _isClobbered(currentNode)) {\n      return;\n    }\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR,\n      forceKeepAttr: undefined\n    };\n    let l = attributes.length;\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      const attr = attributes[l];\n      const {\n        name,\n        namespaceURI,\n        value: attrValue\n      } = attr;\n      const lcName = transformCaseFunc(name);\n      let value = name === 'value' ? attrValue : stringTrim(attrValue);\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);\n      value = hookEvent.attrValue;\n      /* Full DOM Clobbering protection via namespace isolation,\n       * Prefix id and name attributes with `user-content-`\n       */\n      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n        // Remove the attribute with this value\n        _removeAttribute(name, currentNode);\n        // Prefix the value and later re-create the attribute with the sanitized value\n        value = SANITIZE_NAMED_PROPS_PREFIX + value;\n      }\n      /* Work around a security issue with comments inside attributes */\n      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n      /* Remove attribute */\n      _removeAttribute(name, currentNode);\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n      /* Work around a security issue in jQuery 3.0 */\n      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n          value = stringReplace(value, expr, ' ');\n        });\n      }\n      /* Is `value` valid for this attribute? */\n      const lcTag = transformCaseFunc(currentNode.nodeName);\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n      /* Handle attributes that require Trusted Types */\n      if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n        if (namespaceURI) ; else {\n          switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n            case 'TrustedHTML':\n              {\n                value = trustedTypesPolicy.createHTML(value);\n                break;\n              }\n            case 'TrustedScriptURL':\n              {\n                value = trustedTypesPolicy.createScriptURL(value);\n                break;\n              }\n          }\n        }\n      }\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n        if (_isClobbered(currentNode)) {\n          _forceRemove(currentNode);\n        } else {\n          arrayPop(DOMPurify.removed);\n        }\n      } catch (_) {}\n    }\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);\n  };\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param fragment to iterate over recursively\n   */\n  const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n    let shadowNode = null;\n    const shadowIterator = _createNodeIterator(fragment);\n    /* Execute a hook if present */\n    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);\n    while (shadowNode = shadowIterator.nextNode()) {\n      /* Execute a hook if present */\n      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);\n      /* Sanitize tags and elements */\n      _sanitizeElements(shadowNode);\n      /* Check attributes next */\n      _sanitizeAttributes(shadowNode);\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n    }\n    /* Execute a hook if present */\n    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);\n  };\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty) {\n    let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let body = null;\n    let importedNode = null;\n    let currentNode = null;\n    let returnNode = null;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    IS_EMPTY_INPUT = !dirty;\n    if (IS_EMPTY_INPUT) {\n      dirty = '<!-->';\n    }\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString === 'function') {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      } else {\n        throw typeErrorCreate('toString is not a function');\n      }\n    }\n    /* Return dirty HTML if DOMPurify cannot run */\n    if (!DOMPurify.isSupported) {\n      return dirty;\n    }\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n    if (IN_PLACE) {\n      /* Do some early pre-sanitization to avoid unsafe root nodes */\n      if (dirty.nodeName) {\n        const tagName = transformCaseFunc(dirty.nodeName);\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n        }\n      }\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-dom-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&\n      // eslint-disable-next-line unicorn/prefer-includes\n      dirty.indexOf('<') === -1) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      }\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n      }\n    }\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n    /* Get node iterator */\n    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n    /* Now start iterating over the created document */\n    while (currentNode = nodeIterator.nextNode()) {\n      /* Sanitize tags and elements */\n      _sanitizeElements(currentNode);\n      /* Check attributes next */\n      _sanitizeAttributes(currentNode);\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n    }\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n      return returnNode;\n    }\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n    /* Serialize doctype if allowed */\n    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n    }\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n        serializedHTML = stringReplace(serializedHTML, expr, ' ');\n      });\n    }\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n  };\n  DOMPurify.setConfig = function () {\n    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n    const lcTag = transformCaseFunc(tag);\n    const lcName = transformCaseFunc(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n  DOMPurify.removeHook = function (entryPoint, hookFunction) {\n    if (hookFunction !== undefined) {\n      const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);\n      return index === -1 ? undefined : arraySplice(hooks[entryPoint], index, 1)[0];\n    }\n    return arrayPop(hooks[entryPoint]);\n  };\n  DOMPurify.removeHooks = function (entryPoint) {\n    hooks[entryPoint] = [];\n  };\n  DOMPurify.removeAllHooks = function () {\n    hooks = _createHooksMap();\n  };\n  return DOMPurify;\n}\nvar purify = createDOMPurify();\n\nmodule.exports = purify;\n//# sourceMappingURL=purify.cjs.js.map\n", "const DOMPurify = require('dompurify');\r\n\r\n//#### Utils\r\nmodule.exports =\r\nclass DamonUtils {\r\n\r\n    //# MODEL\r\n    constructor(damon) {\r\n        let $ = this;\r\n        $.damon = damon;\r\n        $.websiteRegex = /^(https?:\\/\\/)?[-a-zA-Z0-9]*[a-zA-Z0-9]+(\\.[-a-zA-Z0-9]*[a-zA-Z0-9]+)+/;\r\n        $.httpRegex = /^https?:\\/\\//;\r\n    }\r\n\r\n    /**\r\n     * @param {string} damonString\r\n     * @returns {string}\r\n     */\r\n    damonToSExpression(damonString) {\r\n        const $ = this;\r\n        return $.implicitMapToSExpression($.damon.damonToMap(damonString));\r\n    }\r\n\r\n    /**\r\n     * @param {string} string\r\n     * @returns {string}\r\n     */\r\n    escape(string) {\r\n        return string\r\n            .replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&#039;\");\r\n    }\r\n\r\n    /**\r\n     * @typedef {Map<string, damonValue>} damonMap\r\n     * @typedef {Array<damonValue>} damonArray\r\n     * @typedef {damonMap|damonArray|string|number|boolean|null} damonValue\r\n     * @param {damonValue} jsonMap\r\n     * @param {boolean} safeHTML\r\n     * @param {string} jsonContext\r\n     * @returns {object} DOM\r\n     */\r\n    mapToHtmlList(jsonMap, safeHTML = false, jsonContext = undefined) {\r\n        let $ = this;\r\n        // Parsing check\r\n        try {\r\n            $.damon.mapToJSON(jsonMap);\r\n        } catch (error) {\r\n            console.log(error)\r\n            throw new Error(\"Provided map value doesn't passes JSON.parse()\");\r\n        }\r\n        var jsonItemIndex = 0,\r\n            list = document.createElement('ul'),\r\n            schema;\r\n        if (jsonContext !== undefined) {\r\n            schema = JSON.parse(jsonContext);\r\n        }\r\n        list.className = 'DAMON-List';\r\n        recurse(jsonMap, list);\r\n        return list;\r\n        /**\r\n         * @param {damonValue} jsonMap\r\n         * @param {object} listItem\r\n         * @returns {object} DOM\r\n         */\r\n        function recurse(jsonMap, listItem) {\r\n            if (\r\n                typeof listItem !== 'object'\r\n                || listItem == null\r\n                || Array.isArray(listItem)\r\n            ) {\r\n                throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n            }\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                if (listItem.tagName == \"UL\") {\r\n                    for (const [key, value] of jsonMap) {\r\n                        let newList = document.createElement('ul'),\r\n                            newDiv = document.createElement('code'),\r\n                            keySpan = document.createElement('span'),\r\n                            newListItem = document.createElement('li');\r\n                        keySpan.className = \"type-key\";\r\n                        if ($.websiteRegex.test(key)) {\r\n                            let fullUrl = key;\r\n                            if (!$.httpRegex.test(key))\r\n                                fullUrl = ('https://' + key);\r\n                            let keyLink = DOMPurify.sanitize(`<a href=\"${ fullUrl }\">${ fullUrl }</a>`);\r\n                            keySpan.innerHTML = keyLink;\r\n                        } else {\r\n                            if (\r\n                                jsonContext !== undefined\r\n                                && key in schema['@context']\r\n                            ) {\r\n                                keySpan.innerHTML =\r\n                                    DOMPurify.sanitize(`<a href=\"${ schema['@context'][key]['@id'] }\">${ key }</a>`);\r\n                            } else {\r\n                                keySpan.textContent = key;\r\n                            }\r\n                        }\r\n                        if (\r\n                            typeof value === 'object'\r\n                            && value !== null\r\n                        ) {\r\n                            if (Array.isArray(value)) {\r\n                                if (\r\n                                    jsonMap.damonInlineArrays !== undefined\r\n                                    && jsonMap.damonInlineArrays.indexOf(key) > -1\r\n                                ) {\r\n                                    newDiv.innerHTML = keySpan.outerHTML + ': [';\r\n                                    for (let j = 0, k = value.length; j < k; j++) {\r\n                                        let childValueSpan = document.createElement('span'),\r\n                                            childValue = value[j];\r\n                                        if (childValue === true) {\r\n                                            childValueSpan.textContent = \"true\";\r\n                                            childValueSpan.className = \"type-boolean\";\r\n                                        } else if (childValue === false) {\r\n                                            childValueSpan.textContent = \"false\";\r\n                                            childValueSpan.className = \"type-boolean\";\r\n                                        } else if (childValue === null) {\r\n                                            childValueSpan.textContent = \"null\";\r\n                                            childValueSpan.className = \"type-null\";\r\n                                        } else if (\r\n                                            Number.isFinite(childValue)\r\n                                            && !Number.isNaN(childValue)\r\n                                        ) {\r\n                                            childValueSpan.textContent = childValue + \"\";\r\n                                            childValueSpan.className = \"type-number\";\r\n                                        } else {\r\n                                            if (safeHTML) {\r\n                                                if ($.websiteRegex.test(childValue)) {\r\n                                                    let fullUrl = childValue;\r\n                                                    if (!$.httpRegex.test(childValue))\r\n                                                        fullUrl = 'https://' + childValue;\r\n                                                    childValueSpan.innerHTML =\r\n                                                        DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                                } else {\r\n                                                    childValueSpan.innerHTML = `\"${childValue}\"`;\r\n                                                }\r\n                                            } else {\r\n                                                if ($.websiteRegex.test(childValue)) {\r\n                                                    let fullUrl = childValue;\r\n                                                    if (!$.httpRegex.test(childValue))\r\n                                                        fullUrl = 'https://' + childValue;\r\n                                                    childValueSpan.innerHTML =\r\n                                                        DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                                } else {\r\n                                                    childValueSpan.textContent = `\"${childValue}\"`;\r\n                                                }\r\n                                            }\r\n                                            childValueSpan.className = \"type-string\";\r\n                                        }\r\n                                        if (j !== 0) {\r\n                                            newDiv.innerHTML += ', ';\r\n                                        }\r\n                                        newDiv.appendChild(childValueSpan);\r\n                                    }\r\n                                    newDiv.innerHTML += ']';\r\n                                    newListItem.appendChild(newDiv);\r\n                                    newListItem.appendChild(newList);\r\n                                    listItem.appendChild(newListItem);\r\n                                } else {\r\n                                    newDiv.innerHTML = keySpan.outerHTML + ': []';\r\n                                    newListItem.appendChild(newDiv);\r\n                                    newListItem.appendChild(newList);\r\n                                    listItem.appendChild(newListItem);\r\n                                    recurse(value, newList);\r\n                                }\r\n                            } else {\r\n                                if (\r\n                                    jsonMap.implicitMaps !== undefined\r\n                                    && jsonMap.implicitMaps.indexOf(key) > -1\r\n                                ) {\r\n                                    newDiv.innerHTML = keySpan.outerHTML;\r\n                                } else {\r\n                                    newDiv.innerHTML = keySpan.outerHTML + ': {}';\r\n                                }\r\n                                newListItem.appendChild(newDiv);\r\n                                newListItem.appendChild(newList);\r\n                                listItem.appendChild(newListItem);\r\n                                recurse(value, newList);\r\n                            }\r\n                        } else {\r\n                            jsonItemIndex++;\r\n                            newDiv.innerHTML = keySpan.outerHTML + ': ';\r\n                            let valueSpan = document.createElement('span');\r\n                            let childText = value;\r\n                            if (childText === true) {\r\n                                valueSpan.textContent = \"true\";\r\n                                valueSpan.className = \"type-boolean\";\r\n                            } else if (childText === false) {\r\n                                valueSpan.textContent = \"false\";\r\n                                valueSpan.className = \"type-boolean\";\r\n                            } else if (childText === null) {\r\n                                valueSpan.textContent = \"null\";\r\n                                valueSpan.className = \"type-null\";\r\n                            } else if (\r\n                                Number.isFinite(childText)\r\n                                && !Number.isNaN(childText)\r\n                            ) {\r\n                                valueSpan.textContent = childText + \"\";\r\n                                valueSpan.className = \"type-number\";\r\n                            } else {\r\n                                if (safeHTML) {\r\n                                    if ($.websiteRegex.test(childText)) {\r\n                                        let fullUrl = childText;\r\n                                        if (!$.httpRegex.test(childText))\r\n                                            fullUrl = 'https://' + childText;\r\n                                        valueSpan.innerHTML =\r\n                                            DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                    } else {\r\n                                        valueSpan.innerHTML = `\"${childText}\"`;\r\n                                    }\r\n                                } else {\r\n                                    if ($.websiteRegex.test(childText)) {\r\n                                        let fullUrl = childText;\r\n                                        if (!$.httpRegex.test(childText))\r\n                                            fullUrl = 'https://' + childText;\r\n                                        valueSpan.innerHTML =\r\n                                            DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                    } else {\r\n                                        valueSpan.textContent = `\"${childText}\"`;\r\n                                    }\r\n                                }\r\n                                valueSpan.className = \"type-string\";\r\n                            }\r\n                            if (\r\n                                jsonMap.implicitNulls === undefined\r\n                                || jsonMap.implicitNulls.indexOf(key) == -1\r\n                            ) {\r\n                                newDiv.appendChild(valueSpan);\r\n                            } else {\r\n                                newDiv.innerHTML = newDiv.innerHTML.slice(0, -2);\r\n                            }\r\n                            newListItem.appendChild(newDiv);\r\n                            listItem.appendChild(newListItem);\r\n                        }\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                for (var i = 0, c = jsonMap.length; i < c; i++) {\r\n                    let newList = document.createElement('ul'),\r\n                        newDiv = document.createElement('code'),\r\n                        newListItem = document.createElement('li');\r\n                    if (\r\n                        typeof jsonMap[i] === 'object'\r\n                        && jsonMap[i] !== null\r\n                    ) {\r\n                        if (Array.isArray(jsonMap[i])) {\r\n                            if (\r\n                                jsonMap.damonInlineArrays !== undefined\r\n                                && jsonMap.damonInlineArrays.indexOf(i) > -1\r\n                            ) {\r\n                                newDiv.innerHTML += '[';\r\n                                for (let j = 0, k = jsonMap[i].length; j < k; j++) {\r\n                                    let valueSpan = document.createElement('span'),\r\n                                        value = jsonMap[i][j];\r\n                                    if (value === true) {\r\n                                        valueSpan.textContent = \"true\";\r\n                                        valueSpan.className = \"type-boolean\";\r\n                                    } else if (value === false) {\r\n                                        valueSpan.textContent = \"false\";\r\n                                        valueSpan.className = \"type-boolean\";\r\n                                    } else if (value === null) {\r\n                                        valueSpan.textContent = \"null\";\r\n                                        valueSpan.className = \"type-null\";\r\n                                    } else if (\r\n                                        Number.isFinite(value)\r\n                                        && !Number.isNaN(value)\r\n                                    ) {\r\n                                        valueSpan.textContent = value + \"\";\r\n                                        valueSpan.className = \"type-number\";\r\n                                    } else {\r\n                                        if (safeHTML) {\r\n                                            if ($.websiteRegex.test(value)) {\r\n                                                let fullUrl = value;\r\n                                                if (!$.httpRegex.test(value))\r\n                                                    fullUrl = ('https://' + value);\r\n                                                valueSpan.innerHTML =\r\n                                                    DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                            } else {\r\n                                                valueSpan.innerHTML = `\"${value}\"`;\r\n                                            }\r\n                                        } else {\r\n                                            if ($.websiteRegex.test(value)) {\r\n                                                let fullUrl = value;\r\n                                                if (!$.httpRegex.test(value))\r\n                                                    fullUrl = ('https://' + value);\r\n                                                valueSpan.innerHTML =\r\n                                                    DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                            } else {\r\n                                                valueSpan.textContent = `\"${value}\"`;\r\n                                            }\r\n                                        }\r\n                                        valueSpan.className = \"type-string\";\r\n                                    }\r\n                                    if (j !== 0) {\r\n                                        newDiv.innerHTML += ', ';\r\n                                    }\r\n                                    newDiv.appendChild(valueSpan);\r\n                                }\r\n                                newDiv.innerHTML += ']';\r\n                                newListItem.appendChild(newDiv);\r\n                                newListItem.appendChild(newList);\r\n                                listItem.appendChild(newListItem);\r\n                            } else {\r\n                                newDiv.textContent = \"[]\";\r\n                                newListItem.appendChild(newDiv);\r\n                                newListItem.appendChild(newList);\r\n                                listItem.appendChild(newListItem);\r\n                                recurse(jsonMap[i], newList);\r\n                            }\r\n                        } else {\r\n                            newDiv.textContent = \"{}\";\r\n                            newListItem.appendChild(newDiv);\r\n                            newListItem.appendChild(newList);\r\n                            listItem.appendChild(newListItem);\r\n                            recurse(jsonMap[i], newList);\r\n                        }\r\n                    } else {\r\n                        jsonItemIndex++;\r\n                        let childText = jsonMap[i];\r\n                        if (childText === true) {\r\n                            newDiv.textContent = \"true\";\r\n                            newDiv.className = \"type-boolean\";\r\n                        } else if (childText === false) {\r\n                            newDiv.textContent = \"false\";\r\n                            newDiv.className = \"type-boolean\";\r\n                        } else if (childText === null) {\r\n                            newDiv.textContent = \"null\";\r\n                            newDiv.className = \"type-null\";\r\n                        } else if (\r\n                            Number.isFinite(childText)\r\n                            && !Number.isNaN(childText)\r\n                        ) {\r\n                            newDiv.textContent = childText + \"\";\r\n                            newDiv.className = \"type-number\";\r\n                        } else {\r\n                            if (safeHTML) {\r\n                                if ($.websiteRegex.test(childText)) {\r\n                                    let fullUrl = childText;\r\n                                    if (!$.httpRegex.test(childText))\r\n                                        fullUrl = 'https://' + childText;\r\n                                    newDiv.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                } else {\r\n                                    newDiv.innerHTML = `\"${childText}\"`;\r\n                                }\r\n                            } else {\r\n                                if ($.websiteRegex.test(childText)) {\r\n                                    let fullUrl = childText;\r\n                                    if (!$.httpRegex.test(childText))\r\n                                        fullUrl = 'https://' + childText;\r\n                                    newDiv.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                } else {\r\n                                    newDiv.textContent = `\"${childText}\"`;\r\n                                }\r\n                            }\r\n                            newDiv.className = \"type-string\";\r\n                        }\r\n                        newListItem.appendChild(newDiv);\r\n                        newListItem.appendChild(newList);\r\n                        listItem.appendChild(newListItem);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {damonValue} jsonMap\r\n     * @param {boolean} [safeHTML=false]\r\n     * @returns {object} DOM\r\n     */\r\n    mapToHtmlTable(jsonMap, safeHTML = false) {\r\n        let $ = this;\r\n        // Parsing check\r\n        try {\r\n            $.damon.mapToJSON(jsonMap);\r\n        } catch (error) {\r\n            throw new Error(\"Provided map value doesn't passes JSON.parse()\");\r\n        }\r\n        var jsonItemIndex = 0,\r\n            table = document.createElement('table'),\r\n            tHead = document.createElement('thead'),\r\n            tBody = document.createElement('tbody'),\r\n            headingsEncountered = false,\r\n            columnsLength = 0;\r\n        table.className = 'DAMON-Table';\r\n        if (\r\n            typeof jsonMap !== 'object'\r\n            || jsonMap == null\r\n            || Array.isArray(jsonMap)\r\n            || !(jsonMap instanceof Map)\r\n            || jsonMap.constructor !== Map\r\n        ) {\r\n            throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n        }\r\n        for (const [key, value] of jsonMap) {\r\n            if (\r\n                typeof value === 'object'\r\n                && value !== null\r\n                && !Array.isArray(value)\r\n                && value instanceof Map\r\n                && value.constructor === Map\r\n            ) {\r\n                if (\r\n                    key == \"0\"\r\n                    && !headingsEncountered\r\n                ) {\r\n                    let row = document.createElement('tr');\r\n                    columnsLength = value.length;\r\n\r\n                    for (const [childKey, childValue] of value) {\r\n                        if (childValue === null) {\r\n                            let headerCell = document.createElement('th');\r\n                            if (safeHTML) {\r\n                                if ($.websiteRegex.test(childKey)) {\r\n                                    headerCell.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ childKey }\">${ childKey }</a>`);\r\n                                } else {\r\n                                    headerCell.innerHTML = `${childKey}`;\r\n                                }\r\n                            } else {\r\n                                if ($.websiteRegex.test(childKey)) {\r\n                                    headerCell.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ childKey }\">${ childKey }</a>`);\r\n                                } else {\r\n                                    headerCell.textContent = `${childKey}`;\r\n                                }\r\n                            }\r\n                            row.appendChild(headerCell);\r\n                        } else {\r\n                            throw new Error(\"Expected implicit null property, saw otherwise\");\r\n                        }\r\n                    }\r\n                    tHead.appendChild(row);\r\n                    headingsEncountered = true;\r\n                } else {\r\n                    if (columnsLength == 0)\r\n                        columnsLength = value.length;\r\n                    if (value.length != columnsLength) {\r\n                        // unmatching columns length\r\n                        throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                    }\r\n                    let row = document.createElement('tr');\r\n                    for (const [childKey, childValue] of value) {\r\n                        if (childValue === null) {\r\n                            let dataCell = document.createElement('td');\r\n                            if (safeHTML) {\r\n                                if ($.websiteRegex.test(childKey)) {\r\n                                    dataCell.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ childKey }\">${ childKey }</a>`);\r\n                                } else {\r\n                                    dataCell.innerHTML = `${childKey}`;\r\n                                }\r\n                            } else {\r\n                                if ($.websiteRegex.test(childKey)) {\r\n                                    dataCell.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ childKey }\">${ childKey }</a>`);\r\n                                } else {\r\n                                    dataCell.textContent = `${childKey}`;\r\n                                }\r\n                            }\r\n                            row.appendChild(dataCell);\r\n                        } else {\r\n                            throw new Error(\"Expected implicit null property, saw otherwise\");\r\n                        }\r\n                    }\r\n                    tBody.appendChild(row);\r\n                }\r\n            } else if (\r\n                typeof value !== 'object'\r\n                && key == \"00\"\r\n            ) {\r\n                let caption = document.createElement('caption');\r\n                if (safeHTML) {\r\n                    caption.innerHTML = value;\r\n                } else {\r\n                    caption.textContent = value;\r\n                }\r\n                table.appendChild(caption);\r\n            } else {\r\n                throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n            }\r\n            jsonItemIndex++;\r\n        }\r\n        if (headingsEncountered) {\r\n            table.appendChild(tHead);\r\n        }\r\n        table.appendChild(tBody);\r\n        return table;\r\n    }\r\n\r\n    // Expects a complete tree (all terminal leaves at the same level)\r\n    /**\r\n     * @param {damonValue} jsonMap\r\n     * @param {boolean} [safeHTML=false]\r\n     * @returns {object} DOM\r\n     */\r\n    mapTreeLeavesToHtmlTable(jsonMap, safeHTML = false) {\r\n        let $ = this;\r\n        // Parsing check\r\n        try {\r\n            $.damon.mapToJSON(jsonMap);\r\n        } catch (error) {\r\n            throw new Error(\"Provided map value doesn't passes JSON.parse()\")\r\n        }\r\n        var jsonItemIndex = 0,\r\n            expectedDepth = 0,\r\n            table = document.createElement('table'),\r\n            tHead = document.createElement('thead'),\r\n            tBody = document.createElement('tbody'),\r\n            headingsEncountered = false;\r\n        table.className = 'DAMON-LeavesToTable';\r\n        if (\r\n            typeof jsonMap !== 'object'\r\n            || jsonMap == null\r\n            || Array.isArray(jsonMap)\r\n            || !(jsonMap instanceof Map)\r\n            || jsonMap.constructor !== Map\r\n        ) {\r\n            throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n        }\r\n        for (const [key, value] of jsonMap) {\r\n            if (\r\n                typeof value === 'object'\r\n                && !Array.isArray(value)\r\n            ) {\r\n                if (\r\n                    key == \"head\"\r\n                    && !headingsEncountered\r\n                ) {\r\n                    try {\r\n                        recurse(value, tHead);\r\n                    } catch (e) {\r\n                        return;\r\n                    }\r\n                    headingsEncountered = true;\r\n                } else if (\r\n                    key == \"body\"\r\n                ) {\r\n                    try {\r\n                        recurse(value, tBody);\r\n                    } catch (e) {\r\n                        return;\r\n                    }\r\n                }\r\n            } else if (\r\n                typeof value !== 'object'\r\n                && key == \"caption\"\r\n            ) {\r\n                let caption = document.createElement('caption');\r\n                if (safeHTML) {\r\n                    caption.innerHTML = value;\r\n                } else {\r\n                    caption.textContent = value;\r\n                }\r\n                table.appendChild(caption);\r\n            } else {\r\n                throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n            }\r\n            jsonItemIndex++;\r\n        }\r\n        if (headingsEncountered) {\r\n            table.appendChild(tHead);\r\n        }\r\n        table.appendChild(tBody);\r\n        return table;\r\n        /**\r\n         * @param {damonValue} jsonMap\r\n         * @param {object} tableSubContainer\r\n         * @param {number} [level=0]\r\n         * @param {array} [line=[]]\r\n         */\r\n        function recurse(jsonMap, tableSubContainer, level = 0, line = []) {\r\n            if (\r\n                typeof tableSubContainer !== 'object'\r\n                || tableSubContainer == null\r\n            ) {\r\n                throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n            }\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                if (tableSubContainer.tagName == \"THEAD\") {\r\n                    if (Array.from(jsonMap.keys()).length == 1) {\r\n                        if (\r\n                            typeof jsonMap.get(Array.from(jsonMap.keys())[0]) === 'object'\r\n                            && jsonMap.get(Array.from(jsonMap.keys())[0]) !== null\r\n                        ) {\r\n                            jsonItemIndex++;\r\n                            recurse(\r\n                                jsonMap.get(Array.from(jsonMap.keys())[0]),\r\n                                tableSubContainer,\r\n                                level + 1,\r\n                                line.concat([Array.from(jsonMap.keys())[0]])\r\n                            );\r\n                        } else {\r\n                            throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                        }\r\n                    } else {\r\n                        throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                    }\r\n                } else if (\r\n                    tableSubContainer.tagName == \"TBODY\"\r\n                ) {\r\n                    if (Array.from(jsonMap.keys()).length == 0) {\r\n                        throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                    }\r\n                    for (const [key, value] of jsonMap) {\r\n                        if (\r\n                            typeof value === 'object'\r\n                            && value !== null\r\n                        ) {\r\n                            jsonItemIndex++;\r\n                            recurse(value, tableSubContainer, level + 1, line.concat([key]));\r\n                        } else {\r\n                            throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                        }\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                if (tableSubContainer.tagName == \"THEAD\") {\r\n                    if (jsonMap.length == 1) {\r\n                        jsonItemIndex++;\r\n                        expectedDepth = level;\r\n                        let tableRow = document.createElement('tr');\r\n                        line.push(jsonMap[0]);\r\n                        for (let i = 0, c = line.length; i < c; i++) {\r\n                            let headerCell = document.createElement('th');\r\n                            if (safeHTML) {\r\n                                headerCell.innerHTML = line[i];\r\n                            } else {\r\n                                headerCell.textContent = line[i];\r\n                            }\r\n                            tableRow.appendChild(headerCell);\r\n                        }\r\n                        tableSubContainer.appendChild(tableRow);\r\n                    } else {\r\n                        throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                    }\r\n                } else if (\r\n                    tableSubContainer.tagName == \"TBODY\"\r\n                ) {\r\n                    if (\r\n                        level == expectedDepth\r\n                    ) {\r\n                        if (jsonMap.length == 0) {\r\n                            throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                        }\r\n                        for (let i = 0, c = jsonMap.length; i < c; i++) {\r\n                            jsonItemIndex++;\r\n                            let tableRow = document.createElement('tr');\r\n                            for (let z = 0, x = line.length; z < x; z++) {\r\n                                let dataCell = document.createElement('td');\r\n                                if (safeHTML) {\r\n                                    dataCell.innerHTML = line[z];\r\n                                } else {\r\n                                    dataCell.textContent = line[z];\r\n                                }\r\n                                tableRow.appendChild(dataCell);\r\n                            }\r\n                            let dataCell = document.createElement('td');\r\n                            if (safeHTML) {\r\n                                dataCell.innerHTML = jsonMap[i];\r\n                            } else {\r\n                                dataCell.textContent = jsonMap[i];\r\n                            }\r\n                            dataCell.textContent = jsonMap[i];\r\n                            tableRow.appendChild(dataCell);\r\n                            tableSubContainer.appendChild(tableRow);\r\n                        }\r\n                    } else {\r\n                        throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {object} list DOM\r\n     * @return {string}\r\n     */\r\n    htmlToJSON(list) {\r\n        let $ = this;\r\n        var listItemIndex = 0;\r\n        if (list.firstElementChild.textContent == '{}') {\r\n            return $._mapToJSON(recurse(list, new Map()));\r\n        } else if (list.firstElementChild.textContent == '[]') {\r\n            return $._mapToJSON(recurse(list, []));\r\n        }\r\n        /**\r\n         * @param {object} list DOM\r\n         * @param {damonValue} jsonMap\r\n         * @returns {damonValue}\r\n         */\r\n        function recurse(list, jsonMap) {\r\n            if (\r\n                typeof list !== 'object'\r\n                || list == null\r\n                || Array.isArray(list)\r\n            ) {\r\n                throw new Error(\"Error List Item number \" + listItemIndex + \": @param { {} } list\");\r\n            }\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                // {}\r\n                for (let i = 0, c = list.children.length; i < c; i++) {\r\n                    listItemIndex++;\r\n                    if (list.children[i].tagName == \"LI\") {\r\n                        if (list.children[i].firstElementChild.tagName == \"CODE\") {\r\n                            if (list.children[i].firstElementChild.innerHTML.length) {\r\n                                let text = list.children[i].firstElementChild.innerHTML.trim();\r\n                                if (\r\n                                    text[text.length - 1] == \":\"\r\n                                    && text.length > 1\r\n                                ) {\r\n                                    let secondGrandChild = list.children[i].children[1];\r\n                                    if (\r\n                                        secondGrandChild.tagName == \"UL\"\r\n                                        && secondGrandChild.firstElementChild.tagName == \"LI\"\r\n                                        && secondGrandChild.children.length == 1\r\n                                        && secondGrandChild.firstElementChild.firstElementChild.tagName == \"CODE\"\r\n                                    ) {\r\n                                        listItemIndex++;\r\n                                        let childText =\r\n                                            secondGrandChild.firstElementChild.firstElementChild.textContent.trim();\r\n                                        if (childText == \"true\") {\r\n                                            jsonMap.set(text.slice(0, -1), true);\r\n                                        } else if (childText == \"false\") {\r\n                                            jsonMap.set(text.slice(0, -1), false);\r\n                                        } else if (childText == \"null\") {\r\n                                            jsonMap.set(text.slice(0, -1), null);\r\n                                        } else if (\r\n                                            isFinite(childText)\r\n                                            && !isNaN(parseFloat(childText))\r\n                                        ) {\r\n                                            jsonMap.set(text.slice(0, -1), childText * 1);\r\n                                        } else {\r\n                                            jsonMap.set(text.slice(0, -1), childText);\r\n                                        }\r\n                                    } else {\r\n                                        throw new Error(\r\n                                            \"Error List Item number \"\r\n                                            + listItemIndex\r\n                                            + \": not DAMON-compliant.\"\r\n                                        );\r\n                                    }\r\n                                } else if (\r\n                                    text[text.length - 4] == \":\"\r\n                                    && text.length > 4\r\n                                ) {\r\n                                    if (text.slice(-3) == \" []\") {\r\n                                        jsonMap.set(text.slice(0, -4), []);\r\n                                        if (list.children[i].children[1].tagName == \"UL\") {\r\n                                            recurse(list.children[i].children[1], jsonMap.get(text.slice(0, -4)));\r\n                                        } else {\r\n                                            throw new Error(\r\n                                                \"Error List Item number \"\r\n                                                + listItemIndex\r\n                                                + \": not DAMON-compliant.\"\r\n                                            );\r\n                                        }\r\n                                    } else if (text.slice(-3) == \" {}\") {\r\n                                        jsonMap.set(text.slice(0, -4), new Map());\r\n                                        if (list.children[i].children[1].tagName == \"UL\") {\r\n                                            recurse(list.children[i].children[1], jsonMap.get(text.slice(0, -4)));\r\n                                        } else {\r\n                                            throw new Error(\r\n                                                \"Error List Item number \"\r\n                                                + listItemIndex\r\n                                                + \": not DAMON-compliant.\"\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    throw new Error(\r\n                                        \"Error List Item number \"\r\n                                        + listItemIndex\r\n                                        + \": map items need a key\"\r\n                                    );\r\n                                }\r\n                            } else {\r\n                                throw new Error(\"Error List Item number \" + listItemIndex + \": empty node.\");\r\n                            }\r\n                        } else {\r\n                            throw new Error(\"Error List Item number \" + listItemIndex + \": not DAMON-compliant.\");\r\n                        }\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                // []\r\n                for (let i = 0, c = list.children.length; i < c; i++) {\r\n                    listItemIndex++;\r\n                    if (list.children[i].tagName == \"LI\") {\r\n                        if (list.children[i].firstElementChild.tagName == \"CODE\") {\r\n                            if (list.children[i].firstElementChild.innerHTML.length) {\r\n                                let text = list.children[i].firstElementChild.innerHTML.trim();\r\n                                if (\r\n                                    text[text.length - 1] == \":\"\r\n                                    && text.length > 1\r\n                                ) {\r\n                                    throw new Error(\r\n                                        \"Error List Item number \"\r\n                                        + listItemIndex\r\n                                        + \": lists can't have keys.\"\r\n                                    );\r\n                                } else if (\r\n                                    text[text.length - 4] == \":\"\r\n                                    && text.length > 4\r\n                                ) {\r\n                                    throw new Error(\r\n                                        \"Error List Item number \"\r\n                                        + listItemIndex\r\n                                        + \": not DAMON-compliant.\"\r\n                                    );\r\n                                } else {\r\n                                    if (text == \"[]\") {\r\n                                        jsonMap.push([]);\r\n                                        if (\r\n                                            list.children[i].children[1]\r\n                                            && list.children[i].children[1].tagName == \"UL\"\r\n                                        ) {\r\n                                            recurse(list.children[i].children[1], jsonMap[jsonMap.length - 1]);\r\n                                        } else {\r\n                                            throw new Error(\r\n                                                \"Error List Item number \"\r\n                                                + listItemIndex\r\n                                                + \": not DAMON-compliant.\"\r\n                                            );\r\n                                        }\r\n                                    } else if (text == \"{}\") {\r\n                                        jsonMap.push({});\r\n                                        if (\r\n                                            list.children[i].children[1]\r\n                                            && list.children[i].children[1].tagName == \"UL\"\r\n                                        ) {\r\n                                            recurse(list.children[i].children[1], jsonMap[jsonMap.length - 1]);\r\n                                        } else {\r\n                                            throw new Error(\r\n                                                \"Error List Item number \"\r\n                                                + listItemIndex\r\n                                                + \": not DAMON-compliant.\"\r\n                                            );\r\n                                        }\r\n                                    } else if (text == \"true\") {\r\n                                        jsonMap.push(true);\r\n                                    } else if (text == \"false\") {\r\n                                        jsonMap.push(false);\r\n                                    } else if (text == \"null\") {\r\n                                        jsonMap.push(null);\r\n                                    } else if (\r\n                                        isFinite(text)\r\n                                        && !isNaN(parseFloat(text))\r\n                                    ) {\r\n                                        jsonMap.push(text * 1);\r\n                                    } else {\r\n                                        jsonMap.push(text);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                throw new Error(\"Error List Item number \" + listItemIndex + \": empty node.\");\r\n                            }\r\n                        } else {\r\n                            throw new Error(\"Error List Item number \" + listItemIndex + \": not DAMON-compliant.\");\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error(\"Error List Item number \" + listItemIndex + \": @param { {} | [] } jsonMap\");\r\n            }\r\n            return jsonMap;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {damonMap} jsonMap\r\n     * @returns {string}\r\n     */\r\n    implicitMapToSExpression(jsonMap) {\r\n        const $ = this;\r\n        var list = ``;\r\n         if (\r\n            typeof jsonMap === 'object'\r\n            && jsonMap !== null\r\n            && jsonMap instanceof Map\r\n            && jsonMap.constructor === Map\r\n        ) {\r\n            list += \"[\\r\\n\";\r\n            _recurse(jsonMap);\r\n            list += \"]\";\r\n            JSON.parse(list)\r\n            return list;\r\n        } else {\r\n            if (typeof jsonMap == 'string') {\r\n                jsonMap = '\"' + jsonMap + '\"';\r\n            }\r\n            JSON.parse(jsonMap)\r\n            return jsonMap;\r\n        }\r\n        /**\r\n         * @param {Map<string, any>|Array<any>} jsonMap\r\n         * @param {number} [level=1]\r\n         * @returns {string}\r\n         */\r\n        function _recurse(jsonMap, level = 1) {\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                let i = -1;\r\n                for (const [key, value] of jsonMap) {\r\n                    i++;\r\n                    if (\r\n                        typeof value === 'object'\r\n                        && value !== null\r\n                    ) {\r\n                        if (Array.isArray(value)) {\r\n                            if (value.length > 0) {\r\n                                list += '    '.repeat(level) + `${JSON.stringify(key)}, [\\r\\n`;\r\n                                _recurse(value, level + 1);\r\n                                list += '    '.repeat(level) + `]`;\r\n                            } else {\r\n                                list += '    '.repeat(level) + `${JSON.stringify(key)}, []`;\r\n                            }\r\n                        } else {\r\n                            if (Array.from(value.keys()).length > 0) {\r\n                                if (level == 1) {\r\n                                    if (i == 0) {\r\n                                        list = \"\";\r\n                                    } else {\r\n                                        throw new Error(\"Multiple S-Expression roots\");\r\n                                    }\r\n                                }\r\n                                list += '    '.repeat(level) + `[${JSON.stringify(key)}, \\r\\n`;\r\n                                _recurse(value, level + 1);\r\n                                if (level != 1) {\r\n                                    list += '    '.repeat(level) + `]`;\r\n                                }\r\n                            } else {\r\n                                list += '    '.repeat(level) + `${JSON.stringify(key)}, []`;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (value === true) {\r\n                            throw new Error('Booleans require quotes');\r\n                        } else if (value === false) {\r\n                            throw new Error('Booleans require quotes');\r\n                        } else if (value === null) {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}`;\r\n                        } else if (\r\n                            Number.isFinite(value)\r\n                            && !Number.isNaN(value)\r\n                        ) {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}` + ', ' + value;\r\n                        } else {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}` + ', ' + `\"${value}\"`;\r\n                        }\r\n                    }\r\n                    if (key != Array.from(jsonMap.keys())[Array.from(jsonMap.keys()).length - 1]) {\r\n                        list += \",\\r\\n\";\r\n                    } else {\r\n                        list += \"\\r\\n\";\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                for (var i = 0, c = jsonMap.length; i < c; i++) {\r\n                    if (\r\n                        typeof jsonMap[i] === 'object'\r\n                        && jsonMap[i] !== null\r\n                    ) {\r\n                        if (Array.isArray(jsonMap[i])) {\r\n                            if (jsonMap[i].length > 0) {\r\n                                list += '    '.repeat(level) + `[\\r\\n`;\r\n                                _recurse(jsonMap[i], level + 1);\r\n                                list += '    '.repeat(level) + `]`;\r\n                            } else {\r\n                                list += '    '.repeat(level) + `[]`;\r\n                            }\r\n                        } else {\r\n                            if (Array.from(jsonMap[i].keys()).length > 0) {\r\n                                list += '    '.repeat(level) + `[\\r\\n`;\r\n                                _recurse(jsonMap[i], level + 1);\r\n                                list += '    '.repeat(level) + `]`;\r\n                            } else {\r\n                                list += '    '.repeat(level) + `[]`;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (jsonMap[i] === true) {\r\n                            throw new Error('Booleans require quotes');\r\n                        } else if (jsonMap[i] === false) {\r\n                            throw new Error('Booleans require quotes');\r\n                        } else if (jsonMap[i] === null) {\r\n                            throw new Error('Array-nulls require quotes');\r\n                        } else if (\r\n                            Number.isFinite(jsonMap[i])\r\n                            && !Number.isNaN(jsonMap[i])\r\n                        ) {\r\n                            list += '    '.repeat(level) + jsonMap[i];\r\n                        } else {\r\n                            list += '    '.repeat(level) + JSON.stringify(jsonMap[i]);\r\n                        }\r\n                    }\r\n                    if (i != c - 1) {\r\n                        list += \",\\r\\n\";\r\n                    } else {\r\n                        list += \"\\r\\n\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} damonString\r\n     * @returns {Array<Array<string|number>>} pathsList\r\n     */\r\n    getPathsList(damonString) {\r\n        const $ = this;\r\n        let damonMap = $.damon.damonToMap(damonString),\r\n            pathsList = [];\r\n        _walkAndPushPaths(damonMap);\r\n        return pathsList;\r\n\r\n        /**\r\n         * @param {Map<string, any>|Array<any>} map\r\n         * @param {Array<string|number>} targetPath\r\n         * @param {Array<string|number>} [currentPath=[]]\r\n        */\r\n        function _walkAndPushPaths(map, currentPath = []) {\r\n            if (\r\n                typeof map === 'object'\r\n                && map !== null\r\n                && !Array.isArray(map)\r\n                && map instanceof Map\r\n                && map.constructor === Map\r\n            ) {\r\n                for (const [key, value] of map) {\r\n                    if (\r\n                        typeof value === 'object'\r\n                        && value !== null\r\n                        && !Array.isArray(value)\r\n                        && value instanceof Map\r\n                        && value.constructor === Map\r\n                        && Array.from(value.keys()).length\r\n                    ) {\r\n                        pathsList.push(currentPath.concat(key));\r\n                        _walkAndPushPaths(value, currentPath.concat([key]));\r\n                    } else if (\r\n                        Array.isArray(value)\r\n                        && (\r\n                            map.damonInlineArrays == undefined\r\n                            || map.damonInlineArrays.indexOf(key) === -1\r\n                        ) && value.length\r\n                    ) {\r\n                        pathsList.push(currentPath.concat(key));\r\n                        _walkAndPushPaths(value, currentPath.concat([key]));\r\n                    } else {\r\n                        pathsList.push(currentPath.concat(key).concat(value));\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 0, c = map.length; i < c; i++) {\r\n                    if (\r\n                        typeof map[i] === 'object'\r\n                        && map[i] !== null\r\n                        && !Array.isArray(map[i])\r\n                        && map[i] instanceof Map\r\n                        && map[i].constructor === Map\r\n                        && Array.from(map[i].keys()).length\r\n                    ) {\r\n                        pathsList.push(currentPath.concat(i));\r\n                        _walkAndPushPaths(map[i], currentPath.concat([i]));\r\n                    } else if (\r\n                        Array.isArray(map[i])\r\n                        && (\r\n                            map.damonInlineArrays == undefined\r\n                            || map.damonInlineArrays.indexOf(i) === -1\r\n                        ) && map[i].length\r\n                    ) {\r\n                        pathsList.push(currentPath.concat(i));\r\n                        _walkAndPushPaths(map[i], currentPath.concat([i]));\r\n                    } else {\r\n                        pathsList.push(currentPath.concat(map[i]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Arrays of inline-arrays produce array-parameters\r\n     * @param {string} damonString\r\n     * @return {string} mathJs\r\n     */\r\n    damonToMathJs(damonString) {\r\n        const $ = this;\r\n        let mathJs = '',\r\n            damonMap = $.damon.damonToMap(damonString);\r\n        if (Array.isArray(damonMap)) {\r\n            mathJs += \"(\\r\\n\";\r\n            _recurse(damonMap);\r\n            mathJs += \")\";\r\n            return mathJs;\r\n        } else if (\r\n            typeof damonMap === 'object'\r\n            && damonMap !== null\r\n            && damonMap instanceof Map\r\n            && damonMap.constructor === Map\r\n        ) {\r\n            mathJs += \"(\\r\\n\";\r\n            _recurse(damonMap);\r\n            mathJs += \")\";\r\n            return mathJs;\r\n        } else {\r\n            if (typeof damonMap == 'string') {\r\n                damonMap = JSON.stringify(damonMap);\r\n            }\r\n            JSON.parse(damonMap);\r\n            return damonMap;\r\n        }\r\n\r\n        function _minusculize(string) {\r\n            return string[0].toLowerCase + string.slice(1);\r\n        }\r\n        /**\r\n         * @param {Map<string, any>|Array<any>} damonMap\r\n         * @param {number} [level=1]\r\n         * @returns {string}\r\n         */\r\n        function _recurse(damonMap, level = 1) {\r\n            if (\r\n                typeof damonMap === 'object'\r\n                && damonMap !== null\r\n                && !Array.isArray(damonMap)\r\n                && damonMap instanceof Map\r\n                && damonMap.constructor === Map\r\n            ) {\r\n                for (const [key, value] of damonMap) {\r\n                    if (\r\n                        typeof value === 'object'\r\n                        && value !== null\r\n                    ) {\r\n                        if (Array.isArray(value)) {\r\n                            if (value.length > 0) {\r\n                                mathJs += '    '.repeat(level) + `\"${JSON.stringify(_minusculize(key))}\"(\\r\\n`;\r\n                                _recurse(value, level + 1);\r\n                                mathJs += '    '.repeat(level) + `)`;\r\n                            } else {\r\n                                mathJs += '    '.repeat(level) + `\"${JSON.stringify(_minusculize(key))}\"()`;\r\n                            }\r\n                        } else {\r\n                            if (Array.from(value.keys()).length > 0) {\r\n                                mathJs += '    '.repeat(level) + `\"${JSON.stringify(_minusculize(key))}\"(\\r\\n`;\r\n                                _recurse(value, level + 1);\r\n                                mathJs += '    '.repeat(level) + `)`;\r\n                            } else {\r\n                                mathJs += '    '.repeat(level) + `\"${JSON.stringify(_minusculize(key))}\"()`;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (value === true) {\r\n                            mathJs += '    '.repeat(level) + `\"${JSON.stringify(_minusculize(key))}\"` + \"(true)\";\r\n                        } else if (value === false) {\r\n                            mathJs += '    '.repeat(level) + `\"${JSON.stringify(_minusculize(key))}\"` + \"(false)\";\r\n                        } else if (value === null) {\r\n                            mathJs += '    '.repeat(level) + `\"${JSON.stringify(_minusculize(key))}\"` + \"(null)\";\r\n                        } else if (\r\n                            Number.isFinite(value)\r\n                            && !Number.isNaN(value)\r\n                        ) {\r\n                            mathJs += '    '.repeat(level) + `\"${JSON.stringify(_minusculize(key))}\"` + '(' + value + ')';\r\n                        } else {\r\n                            mathJs +=\r\n                                '    '.repeat(level)\r\n                                + `\"${JSON.stringify(_minusculize(key))}\"`\r\n                                + '(\"' + JSON.stringify(value) + '\")';\r\n                        }\r\n                    }\r\n                    if (key != Array.from(damonMap.keys())[Array.from(damonMap.keys()).length - 1]) {\r\n                        mathJs += \",\\r\\n\";\r\n                    } else {\r\n                        mathJs += \"\\r\\n\";\r\n                    }\r\n                }\r\n            } else if (Array.isArray(damonMap)) {\r\n                for (var i = 0, c = damonMap.length; i < c; i++) {\r\n                    if (\r\n                        typeof damonMap[i] === 'object'\r\n                        && damonMap[i] !== null\r\n                    ) {\r\n                        if (Array.isArray(damonMap[i])) {\r\n                            if (damonMap[i].length > 0) {\r\n                                if (\r\n                                    damonMap.damonInlineArrays !== undefined\r\n                                    && damonMap.damonInlineArrays.indexOf(i) > -1\r\n                                ) {\r\n                                    mathJs += '    '.repeat(level) + JSON.stringify(damonMap[i]);\r\n                                } else {\r\n                                    mathJs += '    '.repeat(level) + `(\\r\\n`;\r\n                                    _recurse(damonMap[i], level + 1);\r\n                                    mathJs += '    '.repeat(level) + `)`;\r\n                                }\r\n                            } else {\r\n                                mathJs += '    '.repeat(level) + `()`;\r\n                            }\r\n                        } else {\r\n                            if (Array.from(damonMap[i].keys()).length > 0) {\r\n                                mathJs += '    '.repeat(level) + `(\\r\\n`;\r\n                                _recurse(damonMap[i], level + 1);\r\n                                mathJs += '    '.repeat(level) + `)`;\r\n                            } else {\r\n                                mathJs += '    '.repeat(level) + `()`;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (damonMap[i] === true) {\r\n                            mathJs += '    '.repeat(level) + \"true\";\r\n                        } else if (damonMap[i] === false) {\r\n                            mathJs += '    '.repeat(level) + \"false\";\r\n                        } else if (damonMap[i] === null) {\r\n                            mathJs += '    '.repeat(level) + \"null\";\r\n                        } else if (\r\n                            Number.isFinite(damonMap[i])\r\n                            && !Number.isNaN(damonMap[i])\r\n                        ) {\r\n                            mathJs += '    '.repeat(level) + damonMap[i];\r\n                        } else {\r\n                            mathJs += '    '.repeat(level) + `\"${JSON.stringify(_minusculize(damonMap[i]))}\"`;\r\n                        }\r\n                    }\r\n                    if (i != c - 1) {\r\n                        mathJs += \",\\r\\n\";\r\n                    } else {\r\n                        mathJs += \"\\r\\n\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {damonValue} firstMap\r\n     * @param {damonValue} secondMap\r\n    */\r\n    _mapsDiff(firstMap, secondMap) {\r\n        let $ = this;\r\n        // Parsing check\r\n        try {\r\n            $.damon.mapToJSON(firstMap);\r\n            $.damon.mapToJSON(secondMap);\r\n        } catch (error) {\r\n            throw new Error(\"Provided map value doesn't passes JSON.parse()\");\r\n        }\r\n        if (\r\n            typeof firstMap !== typeof secondMap\r\n            || (\r\n                (\r\n                    typeof firstMap === 'object'\r\n                    && firstMap !== null\r\n                    && !Array.isArray(firstMap)\r\n                    && firstMap instanceof Map\r\n                    && firstMap.constructor === Map\r\n                ) && (\r\n                    secondMap == null\r\n                    || Array.isArray(secondMap)\r\n                    || !(secondMap instanceof Map)\r\n                    || secondMap.constructor !== Map\r\n                )\r\n            )\r\n        ) {\r\n            // fully red render\r\n            throw new Error(\"Different root types.\");\r\n        }\r\n        var diffMap;\r\n        if (\r\n            typeof firstMap === 'object'\r\n            && firstMap !== null\r\n            && !Array.isArray(firstMap)\r\n            && firstMap instanceof Map\r\n            && firstMap.constructor === Map\r\n        ) {\r\n            diffMap = new Map();\r\n            _walkAndDiff(firstMap);\r\n            return diffMap;\r\n            // # Red-Green-Yellow diffMap\r\n            // - Checks key, value-structure and position: \"green\" && recurse\r\n            // - Fails key or value-structure: red\r\n            // - Fails position: yellow\r\n            // - Check value structure: green\r\n            // # Rendering\r\n            // - Render from Red-Green-Yellow\r\n            // - optimization: lookahead and group\r\n            // Intersection, Substraction, Addition\r\n            // can't use mapToDamon for deep equal\r\n            // strict map ordering check\r\n            // red: diff\r\n            // green: add\r\n            // yellow: displaced\r\n        } else if (Array.isArray(firstMap)) {\r\n            diffMap = [];\r\n            _walkAndDiff(firstMap);\r\n            return diffMap;\r\n            // array case\r\n        }\r\n\r\n        /**\r\n         * @param {Map<string, any>|Array<any>} map\r\n         * @param {Array<string|number>} targetPath\r\n         * @param {Array<string|number>} [currentPath=[]]\r\n        */\r\n        function _walkAndDiff(map, currentPath = []) {\r\n            if (\r\n                typeof map === 'object'\r\n                && map !== null\r\n                && !Array.isArray(map)\r\n                && map instanceof Map\r\n                && map.constructor === Map\r\n            ) {\r\n                let secondMapKey = \"\",\r\n                    secondMapValue = null,\r\n                    secondMapCurrentFractal = secondMap;\r\n                for (let i = 0, c = currentPath.length; i < c; i++) {\r\n                    if (\r\n                        typeof secondMapCurrentFractal === 'object'\r\n                        && secondMapCurrentFractal !== null\r\n                        && !Array.isArray(secondMapCurrentFractal)\r\n                        && secondMapCurrentFractal instanceof Map\r\n                        && secondMapCurrentFractal.constructor === Map\r\n                    ) {\r\n                        secondMapCurrentFractal =\r\n                            secondMapCurrentFractal.get(Array.from(secondMapCurrentFractal.keys())[currentPath[i]]);\r\n                    } else {\r\n                        secondMapCurrentFractal = secondMapCurrentFractal[currentPath[i]];\r\n                    }\r\n                }\r\n                let diffMapCurrentFractal = diffMap;\r\n                for (let i = 0, c = currentPath.length; i < c; i++) {\r\n                    if (\r\n                        typeof diffMapCurrentFractal === 'object'\r\n                        && diffMapCurrentFractal !== null\r\n                        && !Array.isArray(diffMapCurrentFractal)\r\n                        && diffMapCurrentFractal instanceof Map\r\n                        && diffMapCurrentFractal.constructor === Map\r\n                        && Array.from(diffMapCurrentFractal.keys()).length\r\n                    ) {\r\n                        diffMapCurrentFractal =\r\n                            diffMapCurrentFractal.get(Array.from(diffMapCurrentFractal.keys())[currentPath[i]]);\r\n                    } else {\r\n                        diffMapCurrentFractal = diffMapCurrentFractal[currentPath[i]];\r\n                    }\r\n                }\r\n                let index = 0;\r\n                for (const [key, value] of map) {\r\n                    if (index > Array.from(secondMapCurrentFractal.keys()).length - 1) {\r\n                        if (\r\n                            typeof value === 'object'\r\n                            && value !== null\r\n                            && !Array.isArray(value)\r\n                            && value instanceof Map\r\n                            && value.constructor === Map\r\n                        ) {\r\n                            if (\r\n                                Array.from(secondMapCurrentFractal.keys()).indexOf(key) !== -1\r\n                                && (\r\n                                    typeof secondMapCurrentFractal.get(key) === 'object'\r\n                                    && secondMapCurrentFractal.get(key) !== null\r\n                                    && !Array.isArray(secondMapCurrentFractal.get(key))\r\n                                    && secondMapCurrentFractal.get(key) instanceof Map\r\n                                    && secondMapCurrentFractal.get(key).constructor === Map\r\n                                )\r\n                            ) {\r\n                                diffMapCurrentFractal.set(index + '-yellow', null);\r\n                            } else {\r\n                                diffMapCurrentFractal.set(index + '-red', null);\r\n                            }\r\n                        } else if (Array.isArray(value)) {\r\n                            if (\r\n                                Array.from(secondMapCurrentFractal.keys()).indexOf(key) !== -1\r\n                                && Array.isArray(secondMapCurrentFractal.get(key))\r\n                            ) {\r\n                                diffMapCurrentFractal.set(index + '-yellow', null);\r\n                            } else {\r\n                                diffMapCurrentFractal.set(index + '-red', null);\r\n                            }\r\n                        } else {\r\n                            if (\r\n                                Array.from(secondMapCurrentFractal.keys()).indexOf(key) !== -1\r\n                                && value === secondMapCurrentFractal.get(key)\r\n                            ) {\r\n                                diffMapCurrentFractal.set(index + '-yellow', null);\r\n                            } else {\r\n                                diffMapCurrentFractal.set(index + '-red', null);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        secondMapKey = Array.from(secondMapCurrentFractal.keys())[index];\r\n                        secondMapValue = secondMapCurrentFractal.get(secondMapKey);\r\n                        if (\r\n                            typeof value === 'object'\r\n                            && value !== null\r\n                            && !Array.isArray(value)\r\n                            && value instanceof Map\r\n                            && value.constructor === Map\r\n                        ) {\r\n                            if (\r\n                                typeof secondMapValue === 'object'\r\n                                && secondMapValue !== null\r\n                                && !Array.isArray(secondMapValue)\r\n                                && secondMapValue instanceof Map\r\n                                && secondMapValue.constructor === Map\r\n                            ) {\r\n                                if (key === secondMapKey) {\r\n                                    diffMapCurrentFractal.set(index + '-green', new Map());\r\n                                    if (Array.from(value.keys()).length > 0) {\r\n                                        _walkAndDiff(value, currentPath.concat([index]));\r\n                                    }\r\n                                } else if (\r\n                                    Array.from(secondMapCurrentFractal.keys()).indexOf(key) !== -1\r\n                                    && (\r\n                                        typeof secondMapCurrentFractal.get(key) === 'object'\r\n                                        && secondMapCurrentFractal.get(key) !== null\r\n                                        && !Array.isArray(secondMapCurrentFractal.get(key))\r\n                                        && secondMapCurrentFractal.get(key) instanceof Map\r\n                                        && secondMapCurrentFractal.get(key).constructor === Map\r\n                                    )\r\n                                ) {\r\n                                    diffMapCurrentFractal.set(index + '-yellow', null);\r\n                                } else {\r\n                                    diffMapCurrentFractal.set(index + '-red', null);\r\n                                }\r\n                            } else {\r\n                                diffMapCurrentFractal.set(index + '-red', null);\r\n                            }\r\n                        } else if (Array.isArray(value)) {\r\n                            if (Array.isArray(secondMapValue)) {\r\n                                if (key === secondMapKey) {\r\n                                    diffMapCurrentFractal.set(index + '-green', []);\r\n                                    if (value.length > 0) {\r\n                                        _walkAndDiff(value, currentPath.concat([index]));\r\n                                    }\r\n                                } else if (\r\n                                    Array.from(secondMapCurrentFractal.keys()).indexOf(key) !== -1\r\n                                    && Array.isArray(secondMapCurrentFractal.get(key))\r\n                                ) {\r\n                                    diffMapCurrentFractal.set(index + '-yellow', null);\r\n                                } else {\r\n                                    diffMapCurrentFractal.set(index + '-red', null);\r\n                                }\r\n                            } else {\r\n                                diffMapCurrentFractal.set(index + '-red', null);\r\n                            }\r\n                        } else {\r\n                            if (value === secondMapValue) {\r\n                                if (key === secondMapKey) {\r\n                                    diffMapCurrentFractal.set(index + '-green', 'green');\r\n                                } else if (\r\n                                    Array.from(secondMapCurrentFractal.keys()).indexOf(key) !== -1\r\n                                    && value === secondMapCurrentFractal.get(key)\r\n                                ) {\r\n                                    diffMapCurrentFractal.set(index + '-yellow', null);\r\n                                } else {\r\n                                    diffMapCurrentFractal.set(index + '-red', null);\r\n                                }\r\n                            } else {\r\n                                diffMapCurrentFractal.set(index + '-red', null);\r\n                            }\r\n                        }\r\n                    }\r\n                    index++;\r\n                }\r\n                if (Array.from(map.keys()).length < Array.from(secondMapCurrentFractal.keys()).length) {\r\n                    let secondMapIndex = 0;\r\n                    for (let [key, value] of secondMapCurrentFractal) {\r\n                        if (secondMapIndex <= index) {\r\n                            continue;\r\n                        }\r\n                        if (\r\n                            typeof value === 'object'\r\n                            && value !== null\r\n                            && !Array.isArray(value)\r\n                            && value instanceof Map\r\n                            && value.constructor === Map\r\n                        ) {\r\n                            if (\r\n                                Array.from(map.keys()).indexOf(key) !== -1\r\n                                && (\r\n                                    typeof map.get(key) === 'object'\r\n                                    && map.get(key) !== null\r\n                                    && !Array.isArray(map.get(key))\r\n                                    && map.get(key) instanceof Map\r\n                                    && map.get(key).constructor === Map\r\n                                )\r\n                            ) {\r\n                                diffMapCurrentFractal.set(index + '-yellow', null);\r\n                            } else {\r\n                                diffMapCurrentFractal.set(index + '-red', null);\r\n                            }\r\n                        } else if (Array.isArray(value)) {\r\n                            if (\r\n                                Array.from(map.keys()).indexOf(key) !== -1\r\n                                && Array.isArray(map.get(key))\r\n                            ) {\r\n                                diffMapCurrentFractal.set(index + '-yellow', null);\r\n                            } else {\r\n                                diffMapCurrentFractal.set(index + '-red', null);\r\n                            }\r\n                        } else {\r\n                            if (\r\n                                Array.from(map.keys()).indexOf(key) !== -1\r\n                                && value === map.get(key)\r\n                            ) {\r\n                                diffMapCurrentFractal.set(index + '-yellow', null);\r\n                            } else {\r\n                                diffMapCurrentFractal.set(index + '-red', null);\r\n                            }\r\n                        }\r\n                        secondMapIndex++;\r\n                    }\r\n                }\r\n            } else {\r\n                let secondMapValue = null,\r\n                    secondMapCurrentFractal = secondMap;\r\n                for (let z = 0, x = currentPath.length; z < x; z++) {\r\n                    if (\r\n                        typeof secondMapCurrentFractal === 'object'\r\n                        && secondMapCurrentFractal !== null\r\n                        && !Array.isArray(secondMapCurrentFractal)\r\n                        && secondMapCurrentFractal instanceof Map\r\n                        && secondMapCurrentFractal.constructor === Map\r\n                        && Array.from(secondMapCurrentFractal.keys()).length\r\n                    ) {\r\n                        secondMapCurrentFractal =\r\n                            secondMapCurrentFractal.get(Array.from(secondMapCurrentFractal.keys())[currentPath[z]]);\r\n                    } else {\r\n                        secondMapCurrentFractal = secondMapCurrentFractal[currentPath[z]];\r\n                    }\r\n                }\r\n                let diffMapCurrentFractal = diffMap;\r\n                for (let i = 0, c = currentPath.length; i < c; i++) {\r\n                    if (\r\n                        typeof diffMapCurrentFractal === 'object'\r\n                        && diffMapCurrentFractal !== null\r\n                        && !Array.isArray(diffMapCurrentFractal)\r\n                        && diffMapCurrentFractal instanceof Map\r\n                        && diffMapCurrentFractal.constructor === Map\r\n                        && Array.from(diffMapCurrentFractal.keys()).length\r\n                    ) {\r\n                        diffMapCurrentFractal =\r\n                            diffMapCurrentFractal.get(Array.from(diffMapCurrentFractal.keys())[currentPath[i]]);\r\n                    } else {\r\n                        diffMapCurrentFractal = diffMapCurrentFractal[currentPath[i]];\r\n                    }\r\n                }\r\n                for (let i = 0, c = map.length; i < c; i++) {\r\n                    if (i > secondMapCurrentFractal.length - 1) {\r\n                        diffMapCurrentFractal[i] = 'red';\r\n                    } else {\r\n                        secondMapValue = secondMapCurrentFractal[i];\r\n                        if (\r\n                            typeof map[i] === 'object'\r\n                            && map[i] !== null\r\n                            && !Array.isArray(map[i])\r\n                            && map[i] instanceof Map\r\n                            && map[i].constructor === Map\r\n                        ) {\r\n                            if (\r\n                                typeof secondMapValue === 'object'\r\n                                && secondMapValue !== null\r\n                                && !Array.isArray(secondMapValue)\r\n                                && secondMapValue instanceof Map\r\n                                && secondMapValue.constructor === Map\r\n                            ) {\r\n                                diffMapCurrentFractal[i] = new Map();\r\n                                if (Array.from(map[i].keys()).length > 0) {\r\n                                    _walkAndDiff(map[i], currentPath.concat([i]));\r\n                                }\r\n                            } else {\r\n                                diffMapCurrentFractal[i] = 'red';\r\n                            }\r\n                        } else if (Array.isArray(map[i])) {\r\n                            if (Array.isArray(secondMapValue)) {\r\n                                diffMapCurrentFractal[i] = [];\r\n                                if (map[i].length > 0) {\r\n                                    _walkAndDiff(map[i], currentPath.concat([i]));\r\n                                }\r\n                            } else {\r\n                                diffMapCurrentFractal[i] = 'red';\r\n                            }\r\n                        } else {\r\n                            if (map[i] === secondMapValue) {\r\n                                diffMapCurrentFractal[i] = 'green';\r\n                            } else {\r\n                                diffMapCurrentFractal[i] = 'red';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (map.length < secondMapCurrentFractal.length) {\r\n                    for (let i = 0, c = secondMapCurrentFractal.length; i < c; i++) {\r\n                        if (i <= map.length - 1) {\r\n                            continue;\r\n                        }\r\n                        diffMapCurrentFractal[i] = 'red';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {*} firstMap\r\n     * @param {*} secondMap\r\n     * @returns {Map} outputMap\r\n     */\r\n    sortMap(firstMap, secondMap) {\r\n        let $ = this,\r\n            firstMapKeys = Array.from(firstMap.keys()),\r\n            secondMapKeys = Array.from(secondMap.keys()),\r\n            outputMap = new Map();\r\n        for (let i = 0, c = firstMapKeys.length; i < c; i++) {\r\n            if (secondMap.get(firstMapKeys[i]) !== undefined) {\r\n                outputMap.set(firstMapKeys[i], secondMap.get(firstMapKeys[i]));\r\n            }\r\n        }\r\n        for (let i = 0, c = secondMapKeys.length; i < c; i++) {\r\n            if (firstMapKeys.indexOf(secondMapKeys[i]) == -1) {\r\n                outputMap.set(secondMapKeys[i], secondMap.get(secondMapKeys[i]));\r\n            }\r\n        }\r\n        return outputMap;\r\n    }\r\n\r\n    /**\r\n     * Produces a blocks diff\r\n     * @param {*} firstMap\r\n     * @param {*} secondMap\r\n     * @returns {string} list\r\n     */\r\n    renderDiff(firstMap, secondMap) {\r\n        let $ = this,\r\n            list = document.createElement('ul'),\r\n            diffMap = $._mapsDiff(firstMap, secondMap);\r\n        list.className = 'DAMON-List';\r\n        recurseDiffMap(diffMap, list);\r\n        return list;\r\n        /**\r\n         * @param {*} diffMap\r\n         * @param {*} listItem\r\n         * @param {*} [path=[]]\r\n         * @param {*} [color=undefined]\r\n         */\r\n        function recurseDiffMap(diffMap, list, path = [], color = 'green') {\r\n            if (color === 'green') {\r\n                if (\r\n                    typeof list !== 'object'\r\n                    || list == null\r\n                    || Array.isArray(list)\r\n                ) {\r\n                    throw new Error(\"Error List Item \" + path.concat('-') + \": @param { {} } list\");\r\n                }\r\n                if (\r\n                    typeof diffMap === 'object'\r\n                    && diffMap !== null\r\n                    && !Array.isArray(diffMap)\r\n                    && diffMap instanceof Map\r\n                    && diffMap.constructor === Map\r\n                ) {\r\n                    if (list.tagName == \"UL\") {\r\n                        let firstMapKey = \"\",\r\n                            firstMapValue = null,\r\n                            firstMapCurrentFractal = firstMap;\r\n                        for (let i = 0, c = path.length; i < c; i++) {\r\n                            if (\r\n                                typeof firstMapCurrentFractal === 'object'\r\n                                && firstMapCurrentFractal !== null\r\n                                && !Array.isArray(firstMapCurrentFractal)\r\n                                && firstMapCurrentFractal instanceof Map\r\n                                && firstMapCurrentFractal.constructor === Map\r\n                            ) {\r\n                                firstMapCurrentFractal =\r\n                                    firstMapCurrentFractal.get(Array.from(firstMapCurrentFractal.keys())[path[i]]);\r\n                            } else {\r\n                                firstMapCurrentFractal = firstMapCurrentFractal[path[i]];\r\n                            }\r\n                        }\r\n                        let secondMapKey = \"\",\r\n                            secondMapValue = null,\r\n                            secondMapCurrentFractal = secondMap;\r\n                        for (let i = 0, c = path.length; i < c; i++) {\r\n                            if (\r\n                                typeof secondMapCurrentFractal === 'object'\r\n                                && secondMapCurrentFractal !== null\r\n                                && !Array.isArray(secondMapCurrentFractal)\r\n                                && secondMapCurrentFractal instanceof Map\r\n                                && secondMapCurrentFractal.constructor === Map\r\n                            ) {\r\n                                secondMapCurrentFractal =\r\n                                    secondMapCurrentFractal.get(Array.from(secondMapCurrentFractal.keys())[path[i]]);\r\n                            } else {\r\n                                secondMapCurrentFractal = secondMapCurrentFractal[path[i]];\r\n                            }\r\n                        }\r\n                        let index = 0;\r\n                        for (let [key, value] of diffMap) {\r\n                            let diffMapKeyColor = Array.from(diffMap.keys())[index].split('-')[1],\r\n                                diffMapValue = diffMap.get(Array.from(diffMap.keys())[index]);\r\n                            let newList = document.createElement('ul'),\r\n                                newDiv = document.createElement('code'),\r\n                                keySpan = document.createElement('span'),\r\n                                newListItem = document.createElement('li');\r\n                            keySpan.className = \"type-key\";\r\n                            // Setting color\r\n                            newListItem.className = diffMapKeyColor + '-diff';\r\n                            if (\r\n                                newListItem.className === 'red-diff'\r\n                                && index <= Array.from(firstMapCurrentFractal.keys()).length - 1\r\n                            ) {\r\n                                if (index > Array.from(secondMapCurrentFractal.keys()).length -  1) {\r\n                                    key = '';\r\n                                    value = '';\r\n                                } else {\r\n                                    if (index > Array.from(firstMapCurrentFractal.keys()).length -  1) {\r\n                                        if (newListItem.className == 'red-diff') {\r\n                                            newListItem.className = 'blue-diff';\r\n                                        } else {\r\n                                            newListItem.className = 'green-diff';\r\n                                        }\r\n                                    }\r\n                                    secondMapKey = Array.from(secondMapCurrentFractal.keys())[index];\r\n                                    secondMapValue = secondMapCurrentFractal.get(secondMapKey);\r\n                                    key = secondMapKey;\r\n                                    value = secondMapValue;\r\n                                }\r\n                            } else {\r\n                                if (newListItem.className === 'green-diff') {\r\n                                    newListItem.dataset.graphArbo = index;\r\n                                    if (path.length > 0)\r\n                                        newListItem.dataset.graphArbo = path.join('-') + '-' + index;\r\n                                    newListItem.className = '';\r\n                                } else {\r\n                                    newListItem.className = 'blue-diff';\r\n                                }\r\n                                firstMapKey = Array.from(secondMapCurrentFractal.keys())[index];\r\n                                firstMapValue = secondMapCurrentFractal.get(firstMapKey);\r\n                                key = firstMapKey;\r\n                                value = firstMapValue;\r\n                            }\r\n                            if ($.websiteRegex.test(key)) {\r\n                                let fullUrl = key;\r\n                                if (!$.httpRegex.test(key))\r\n                                    fullUrl = ('https://' + key);\r\n                                let keyLink = DOMPurify.sanitize(`<a href=\"${ fullUrl }\">${ fullUrl }</a>`);\r\n                                keySpan.innerHTML = keyLink;\r\n                            } else {\r\n                                keySpan.textContent = key;\r\n                            }\r\n                            if (\r\n                                typeof value === 'object'\r\n                                && value !== null\r\n                            ) {\r\n                                if (Array.isArray(value)) {\r\n                                    if (\r\n                                        firstMap.damonInlineArrays !== undefined\r\n                                        && firstMap.damonInlineArrays.indexOf(key) > -1\r\n                                    ) {\r\n                                        newDiv.innerHTML = keySpan.outerHTML + ': [';\r\n                                        for (let j = 0, k = value.length; j < k; j++) {\r\n                                            let childValueSpan = document.createElement('span'),\r\n                                                childValue = value[j];\r\n                                            if (childValue === true) {\r\n                                                childValueSpan.textContent = \"true\";\r\n                                                childValueSpan.className = \"type-boolean\";\r\n                                            } else if (childValue === false) {\r\n                                                childValueSpan.textContent = \"false\";\r\n                                                childValueSpan.className = \"type-boolean\";\r\n                                            } else if (childValue === null) {\r\n                                                childValueSpan.textContent = \"null\";\r\n                                                childValueSpan.className = \"type-null\";\r\n                                            } else if (\r\n                                                Number.isFinite(childValue)\r\n                                                && !Number.isNaN(childValue)\r\n                                            ) {\r\n                                                childValueSpan.textContent = childValue + \"\";\r\n                                                childValueSpan.className = \"type-number\";\r\n                                            } else {\r\n                                                if (safeHTML) {\r\n                                                    if ($.websiteRegex.test(childValue)) {\r\n                                                        let fullUrl = childValue;\r\n                                                        if (!$.httpRegex.test(childValue))\r\n                                                            fullUrl = 'https://' + childValue;\r\n                                                        childValueSpan.innerHTML =\r\n                                                            DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                                    } else {\r\n                                                        childValueSpan.innerHTML = `\"${childValue}\"`;\r\n                                                    }\r\n                                                } else {\r\n                                                    if ($.websiteRegex.test(childValue)) {\r\n                                                        let fullUrl = childValue;\r\n                                                        if (!$.httpRegex.test(childValue))\r\n                                                            fullUrl = 'https://' + childValue;\r\n                                                        childValueSpan.innerHTML =\r\n                                                            DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                                    } else {\r\n                                                        childValueSpan.textContent = `\"${childValue}\"`;\r\n                                                    }\r\n                                                }\r\n                                                childValueSpan.className = \"type-string\";\r\n                                            }\r\n                                            if (j !== 0) {\r\n                                                newDiv.innerHTML += ', ';\r\n                                            }\r\n                                            newDiv.appendChild(childValueSpan);\r\n                                        }\r\n                                        newDiv.innerHTML += ']';\r\n                                        newListItem.appendChild(newDiv);\r\n                                        newListItem.appendChild(newList);\r\n                                        list.appendChild(newListItem);\r\n                                    } else {\r\n                                        newDiv.innerHTML = keySpan.outerHTML + ': []';\r\n                                        newListItem.appendChild(newDiv);\r\n                                        newListItem.appendChild(newList);\r\n                                        list.appendChild(newListItem);\r\n                                        if (diffMapKeyColor == 'green') {\r\n                                            recurseDiffMap(diffMapValue, newList, path.concat([index]), diffMapKeyColor);\r\n                                        } else {\r\n                                            recurseDiffMap(diffMapValue, newList, path.concat([index]), diffMapKeyColor);\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    if (\r\n                                        firstMap.implicitMaps !== undefined\r\n                                        && firstMap.implicitMaps.indexOf(key) > -1\r\n                                    ) {\r\n                                        newDiv.innerHTML = keySpan.outerHTML;\r\n                                    } else {\r\n                                        newDiv.innerHTML = keySpan.outerHTML + ': {}';\r\n                                    }\r\n                                    newListItem.appendChild(newDiv);\r\n                                    newListItem.appendChild(newList);\r\n                                    list.appendChild(newListItem);\r\n                                    if (diffMapKeyColor == 'green') {\r\n                                        recurseDiffMap(diffMapValue, newList, path.concat([index]), diffMapKeyColor);\r\n                                    } else {\r\n                                        recurseDiffMap(diffMapValue, newList, path.concat([index]), diffMapKeyColor);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                newDiv.innerHTML = keySpan.outerHTML + ': ';\r\n                                let valueSpan = document.createElement('span');\r\n                                let childText = value;\r\n                                if (childText === true) {\r\n                                    valueSpan.textContent = \"true\";\r\n                                    valueSpan.className = \"type-boolean\";\r\n                                } else if (childText === false) {\r\n                                    valueSpan.textContent = \"false\";\r\n                                    valueSpan.className = \"type-boolean\";\r\n                                } else if (childText === null) {\r\n                                    valueSpan.textContent = \"null\";\r\n                                    valueSpan.className = \"type-null\";\r\n                                } else if (\r\n                                    Number.isFinite(childText)\r\n                                    && !Number.isNaN(childText)\r\n                                ) {\r\n                                    valueSpan.textContent = childText + \"\";\r\n                                    valueSpan.className = \"type-number\";\r\n                                } else {\r\n                                    if (safeHTML) {\r\n                                        if ($.websiteRegex.test(childText)) {\r\n                                            let fullUrl = childText;\r\n                                            if (!$.httpRegex.test(childText))\r\n                                                fullUrl = 'https://' + childText;\r\n                                            valueSpan.innerHTML =\r\n                                                DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                        } else {\r\n                                            valueSpan.innerHTML = `\"${childText}\"`;\r\n                                        }\r\n                                    } else {\r\n                                        if ($.websiteRegex.test(childText)) {\r\n                                            let fullUrl = childText;\r\n                                            if (!$.httpRegex.test(childText))\r\n                                                fullUrl = 'https://' + childText;\r\n                                            valueSpan.innerHTML =\r\n                                                DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                        } else {\r\n                                            valueSpan.textContent = `\"${childText}\"`;\r\n                                        }\r\n                                    }\r\n                                    valueSpan.className = \"type-string\";\r\n                                }\r\n                                if (\r\n                                    firstMap.implicitNulls === undefined\r\n                                    || firstMap.implicitNulls.indexOf(key) == -1\r\n                                ) {\r\n                                    newDiv.appendChild(valueSpan);\r\n                                } else {\r\n                                    newDiv.innerHTML = newDiv.innerHTML.slice(0, -2);\r\n                                }\r\n                                newListItem.appendChild(newDiv);\r\n                                list.appendChild(newListItem);\r\n                            }\r\n                            index++;\r\n                        }\r\n                    }\r\n                } else if (Array.isArray(diffMap)) {\r\n                    let firstMapValue = null,\r\n                        firstMapCurrentFractal = firstMap;\r\n                    for (let z = 0, x = currentPath.length; z < x; z++) {\r\n                        if (\r\n                            typeof firstMapCurrentFractal === 'object'\r\n                            && firstMapCurrentFractal !== null\r\n                            && !Array.isArray(firstMapCurrentFractal)\r\n                            && firstMapCurrentFractal instanceof Map\r\n                            && firstMapCurrentFractal.constructor === Map\r\n                            && Array.from(firstMapCurrentFractal.keys()).length\r\n                        ) {\r\n                            firstMapCurrentFractal =\r\n                                firstMapCurrentFractal.get(Array.from(firstMapCurrentFractal.keys())[currentPath[z]]);\r\n                        } else {\r\n                            firstMapCurrentFractal = firstMapCurrentFractal[currentPath[z]];\r\n                        }\r\n                    }\r\n                    let secondMapValue = null,\r\n                        secondMapCurrentFractal = secondMap;\r\n                    for (let z = 0, x = currentPath.length; z < x; z++) {\r\n                        if (\r\n                            typeof secondMapCurrentFractal === 'object'\r\n                            && secondMapCurrentFractal !== null\r\n                            && !Array.isArray(secondMapCurrentFractal)\r\n                            && secondMapCurrentFractal instanceof Map\r\n                            && secondMapCurrentFractal.constructor === Map\r\n                            && Array.from(secondMapCurrentFractal.keys()).length\r\n                        ) {\r\n                            secondMapCurrentFractal =\r\n                                secondMapCurrentFractal.get(Array.from(secondMapCurrentFractal.keys())[currentPath[z]]);\r\n                        } else {\r\n                            secondMapCurrentFractal = secondMapCurrentFractal[currentPath[z]];\r\n                        }\r\n                    }\r\n                    for (var i = 0, c = diffMap.length; i < c; i++) {\r\n                        let itemColor = diffMap[i].split('-')[1];\r\n                        let newList = document.createElement('ul'),\r\n                            newDiv = document.createElement('code'),\r\n                            newListItem = document.createElement('li'),\r\n                            value;\r\n                        // Setting color\r\n                        newListItem.className = diffMap[i].split('-')[1] + '-diff';\r\n                        if (\r\n                            newListItem.className === 'red-diff'\r\n                            && i <= firstMapCurrentFractal.length - 1\r\n                        ) {\r\n                            if (i > secondMapCurrentFractal.length - 1) {\r\n                                value = '';\r\n                            } else {\r\n                                if (i > firstMapCurrentFractal.length -  1) {\r\n                                    if (newListItem.className == 'red-diff') {\r\n                                        newListItem.className = 'blue-diff';\r\n                                    } else {\r\n                                        newListItem.className = 'green-diff';\r\n                                    }\r\n                                }\r\n                                value = secondMapCurrentFractal[i];\r\n                            }\r\n                        } else {\r\n                            if (newListItem.className === 'green-diff') {\r\n                                newListItem.dataset.graphArbo = i;\r\n                                if (path.length > 0)\r\n                                    newListItem.dataset.graphArbo = path.join('-') + '-' + i;\r\n                                newListItem.className = '';\r\n                            } else {\r\n                                newListItem.className = 'blue-diff';\r\n                            }\r\n                            value = firstMapCurrentFractal[i];\r\n                        }\r\n                        if (\r\n                            typeof value === 'object'\r\n                            && value !== null\r\n                        ) {\r\n                            if (Array.isArray(value)) {\r\n                                if (\r\n                                    firstMap.damonInlineArrays !== undefined\r\n                                    && firstMap.damonInlineArrays.indexOf(i) > -1\r\n                                ) {\r\n                                    newDiv.innerHTML += '[';\r\n                                    for (let j = 0, k = value.length; j < k; j++) {\r\n                                        let arrayValueSpan = document.createElement('span'),\r\n                                            arrayValue = value[j];\r\n                                        if (arrayValue === true) {\r\n                                            arrayValueSpan.textContent = \"true\";\r\n                                            arrayValueSpan.className = \"type-boolean\";\r\n                                        } else if (arrayValue === false) {\r\n                                            arrayValueSpan.textContent = \"false\";\r\n                                            arrayValueSpan.className = \"type-boolean\";\r\n                                        } else if (arrayValue === null) {\r\n                                            arrayValueSpan.textContent = \"null\";\r\n                                            arrayValueSpan.className = \"type-null\";\r\n                                        } else if (\r\n                                            Number.isFinite(arrayValue)\r\n                                            && !Number.isNaN(arrayValue)\r\n                                        ) {\r\n                                            arrayValueSpan.textContent = arrayValue + \"\";\r\n                                            arrayValueSpan.className = \"type-number\";\r\n                                        } else {\r\n                                            if (safeHTML) {\r\n                                                if ($.websiteRegex.test(arrayValue)) {\r\n                                                    let fullUrl = arrayValue;\r\n                                                    if (!$.httpRegex.test(arrayValue))\r\n                                                        fullUrl = ('https://' + arrayValue);\r\n                                                    arrayValueSpan.innerHTML =\r\n                                                        DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                                } else {\r\n                                                    arrayValueSpan.innerHTML = `\"${arrayValue}\"`;\r\n                                                }\r\n                                            } else {\r\n                                                if ($.websiteRegex.test(arrayValue)) {\r\n                                                    let fullUrl = arrayValue;\r\n                                                    if (!$.httpRegex.test(arrayValue))\r\n                                                        fullUrl = ('https://' + arrayValue);\r\n                                                    arrayValueSpan.innerHTML =\r\n                                                        DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                                } else {\r\n                                                    arrayValueSpan.textContent = `\"${arrayValue}\"`;\r\n                                                }\r\n                                            }\r\n                                            arrayValueSpan.className = \"type-string\";\r\n                                        }\r\n                                        if (j !== 0) {\r\n                                            newDiv.innerHTML += ', ';\r\n                                        }\r\n                                        newDiv.appendChild(valueSpan);\r\n                                    }\r\n                                    newDiv.innerHTML += ']';\r\n                                    newListItem.appendChild(newDiv);\r\n                                    newListItem.appendChild(newList);\r\n                                    list.appendChild(newListItem);\r\n                                } else {\r\n                                    newDiv.textContent = \"[]\";\r\n                                    newListItem.appendChild(newDiv);\r\n                                    newListItem.appendChild(newList);\r\n                                    list.appendChild(newListItem);\r\n                                    recurseDiffMap(value, newList, path.concat([i]), itemColor);\r\n                                }\r\n                            } else {\r\n                                newDiv.textContent = \"{}\";\r\n                                newListItem.appendChild(newDiv);\r\n                                newListItem.appendChild(newList);\r\n                                list.appendChild(newListItem);\r\n                                recurseDiffMap(value, newList, path.concat([i]), itemColor);\r\n                            }\r\n                        } else {\r\n                            let childText = value;\r\n                            if (childText === true) {\r\n                                newDiv.textContent = \"true\";\r\n                                newDiv.className = \"type-boolean\";\r\n                            } else if (childText === false) {\r\n                                newDiv.textContent = \"false\";\r\n                                newDiv.className = \"type-boolean\";\r\n                            } else if (childText === null) {\r\n                                newDiv.textContent = \"null\";\r\n                                newDiv.className = \"type-null\";\r\n                            } else if (\r\n                                Number.isFinite(childText)\r\n                                && !Number.isNaN(childText)\r\n                            ) {\r\n                                newDiv.textContent = childText + \"\";\r\n                                newDiv.className = \"type-number\";\r\n                            } else {\r\n                                if (safeHTML) {\r\n                                    if ($.websiteRegex.test(childText)) {\r\n                                        let fullUrl = childText;\r\n                                        if (!$.httpRegex.test(childText))\r\n                                            fullUrl = 'https://' + childText;\r\n                                        newDiv.innerHTML =\r\n                                            DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                    } else {\r\n                                        newDiv.innerHTML = `\"${childText}\"`;\r\n                                    }\r\n                                } else {\r\n                                    if ($.websiteRegex.test(childText)) {\r\n                                        let fullUrl = childText;\r\n                                        if (!$.httpRegex.test(childText))\r\n                                            fullUrl = 'https://' + childText;\r\n                                        newDiv.innerHTML =\r\n                                            DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                    } else {\r\n                                        newDiv.textContent = `\"${childText}\"`;\r\n                                    }\r\n                                }\r\n                                newDiv.className = \"type-string\";\r\n                            }\r\n                            newListItem.appendChild(newDiv);\r\n                            newListItem.appendChild(newList);\r\n                            list.appendChild(newListItem);\r\n                        }\r\n                    }\r\n                }\r\n            } else if (['red', 'yellow'].indexOf(color) > -1) {\r\n                let secondMapKey = \"\",\r\n                    secondMapValue = null,\r\n                    secondMapCurrentFractal = secondMap;\r\n                for (let i = 0, c = path.length; i < c; i++) {\r\n                    if (\r\n                        typeof secondMapCurrentFractal === 'object'\r\n                        && secondMapCurrentFractal !== null\r\n                        && !Array.isArray(secondMapCurrentFractal)\r\n                        && secondMapCurrentFractal instanceof Map\r\n                        && secondMapCurrentFractal.constructor === Map\r\n                    ) {\r\n                        secondMapCurrentFractal =\r\n                            secondMapCurrentFractal.get(Array.from(secondMapCurrentFractal.keys())[path[i]]);\r\n                    } else {\r\n                        secondMapCurrentFractal = secondMapCurrentFractal[path[i]];\r\n                    }\r\n                }\r\n                recurseSecondMap(secondMapCurrentFractal, list, path, color);\r\n            }\r\n        }\r\n        function recurseSecondMap(secondMap, list, path, color) {\r\n            if (\r\n                typeof list !== 'object'\r\n                || list == null\r\n                || Array.isArray(list)\r\n            ) {\r\n                throw new Error(\"Error List Item \" + path.concat('-') + \": @param { {} } list\");\r\n            }\r\n            if (\r\n                typeof secondMap === 'object'\r\n                && secondMap !== null\r\n                && !Array.isArray(secondMap)\r\n                && secondMap instanceof Map\r\n                && secondMap.constructor === Map\r\n            ) {\r\n                if (list.tagName == \"UL\") {\r\n                    let index = 0;\r\n                    for (const [key, value] of secondMap) {\r\n                        let newList = document.createElement('ul'),\r\n                            newDiv = document.createElement('code'),\r\n                            keySpan = document.createElement('span'),\r\n                            newListItem = document.createElement('li');\r\n                        keySpan.className = \"type-key\";\r\n                        // Setting color\r\n                        newListItem.className = 'red-diff';\r\n                        if ($.websiteRegex.test(key)) {\r\n                            let fullUrl = key;\r\n                            if (!$.httpRegex.test(key))\r\n                                fullUrl = ('https://' + key);\r\n                            let keyLink = DOMPurify.sanitize(`<a href=\"${ fullUrl }\">${ fullUrl }</a>`);\r\n                            keySpan.innerHTML = keyLink;\r\n                        } else {\r\n                            keySpan.textContent = key;\r\n                        }\r\n                        if (\r\n                            typeof value === 'object'\r\n                            && value !== null\r\n                        ) {\r\n                            if (Array.isArray(value)) {\r\n                                if (\r\n                                    secondMap.damonInlineArrays !== undefined\r\n                                    && secondMap.damonInlineArrays.indexOf(key) > -1\r\n                                ) {\r\n                                    newDiv.innerHTML = keySpan.outerHTML + ': [';\r\n                                    for (let j = 0, k = value.length; j < k; j++) {\r\n                                        let childValueSpan = document.createElement('span'),\r\n                                            childValue = value[j];\r\n                                        if (childValue === true) {\r\n                                            childValueSpan.textContent = \"true\";\r\n                                            childValueSpan.className = \"type-boolean\";\r\n                                        } else if (childValue === false) {\r\n                                            childValueSpan.textContent = \"false\";\r\n                                            childValueSpan.className = \"type-boolean\";\r\n                                        } else if (childValue === null) {\r\n                                            childValueSpan.textContent = \"null\";\r\n                                            childValueSpan.className = \"type-null\";\r\n                                        } else if (\r\n                                            Number.isFinite(childValue)\r\n                                            && !Number.isNaN(childValue)\r\n                                        ) {\r\n                                            childValueSpan.textContent = childValue + \"\";\r\n                                            childValueSpan.className = \"type-number\";\r\n                                        } else {\r\n                                            if (safeHTML) {\r\n                                                if ($.websiteRegex.test(childValue)) {\r\n                                                    let fullUrl = childValue;\r\n                                                    if (!$.httpRegex.test(childValue))\r\n                                                        fullUrl = 'https://' + childValue;\r\n                                                    childValueSpan.innerHTML =\r\n                                                        DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                                } else {\r\n                                                    childValueSpan.innerHTML = `\"${childValue}\"`;\r\n                                                }\r\n                                            } else {\r\n                                                if ($.websiteRegex.test(childValue)) {\r\n                                                    let fullUrl = childValue;\r\n                                                    if (!$.httpRegex.test(childValue))\r\n                                                        fullUrl = 'https://' + childValue;\r\n                                                    childValueSpan.innerHTML =\r\n                                                        DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                                } else {\r\n                                                    childValueSpan.textContent = `\"${childValue}\"`;\r\n                                                }\r\n                                            }\r\n                                            childValueSpan.className = \"type-string\";\r\n                                        }\r\n                                        if (j !== 0) {\r\n                                            newDiv.innerHTML += ', ';\r\n                                        }\r\n                                        newDiv.appendChild(childValueSpan);\r\n                                    }\r\n                                    newDiv.innerHTML += ']';\r\n                                    newListItem.appendChild(newDiv);\r\n                                    newListItem.appendChild(newList);\r\n                                    list.appendChild(newListItem);\r\n                                } else {\r\n                                    newDiv.innerHTML = keySpan.outerHTML + ': []';\r\n                                    newListItem.appendChild(newDiv);\r\n                                    newListItem.appendChild(newList);\r\n                                    list.appendChild(newListItem);\r\n                                    recurse(value, newList, path.concat([index]), color);\r\n                                }\r\n                            } else {\r\n                                if (\r\n                                    secondMap.implicitMaps !== undefined\r\n                                    && secondMap.implicitMaps.indexOf(key) > -1\r\n                                ) {\r\n                                    newDiv.innerHTML = keySpan.outerHTML;\r\n                                } else {\r\n                                    newDiv.innerHTML = keySpan.outerHTML + ': {}';\r\n                                }\r\n                                newListItem.appendChild(newDiv);\r\n                                newListItem.appendChild(newList);\r\n                                list.appendChild(newListItem);\r\n                                recurseSecondMap(value, newList, path.concat([index]), color);\r\n                            }\r\n                        } else {\r\n                            newDiv.innerHTML = keySpan.outerHTML + ': ';\r\n                            let valueSpan = document.createElement('span');\r\n                            let childText = value;\r\n                            if (childText === true) {\r\n                                valueSpan.textContent = \"true\";\r\n                                valueSpan.className = \"type-boolean\";\r\n                            } else if (childText === false) {\r\n                                valueSpan.textContent = \"false\";\r\n                                valueSpan.className = \"type-boolean\";\r\n                            } else if (childText === null) {\r\n                                valueSpan.textContent = \"null\";\r\n                                valueSpan.className = \"type-null\";\r\n                            } else if (\r\n                                Number.isFinite(childText)\r\n                                && !Number.isNaN(childText)\r\n                            ) {\r\n                                valueSpan.textContent = childText + \"\";\r\n                                valueSpan.className = \"type-number\";\r\n                            } else {\r\n                                if (safeHTML) {\r\n                                    if ($.websiteRegex.test(childText)) {\r\n                                        let fullUrl = childText;\r\n                                        if (!$.httpRegex.test(childText))\r\n                                            fullUrl = 'https://' + childText;\r\n                                        valueSpan.innerHTML =\r\n                                            DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                    } else {\r\n                                        valueSpan.innerHTML = `\"${childText}\"`;\r\n                                    }\r\n                                } else {\r\n                                    if ($.websiteRegex.test(childText)) {\r\n                                        let fullUrl = childText;\r\n                                        if (!$.httpRegex.test(childText))\r\n                                            fullUrl = 'https://' + childText;\r\n                                        valueSpan.innerHTML =\r\n                                            DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                    } else {\r\n                                        valueSpan.textContent = `\"${childText}\"`;\r\n                                    }\r\n                                }\r\n                                valueSpan.className = \"type-string\";\r\n                            }\r\n                            if (\r\n                                secondMap.implicitNulls === undefined\r\n                                || secondMap.implicitNulls.indexOf(key) == -1\r\n                            ) {\r\n                                newDiv.appendChild(valueSpan);\r\n                            } else {\r\n                                newDiv.innerHTML = newDiv.innerHTML.slice(0, -2);\r\n                            }\r\n                            newListItem.appendChild(newDiv);\r\n                            list.appendChild(newListItem);\r\n                        }\r\n                        index++;\r\n                    }\r\n                }\r\n            } else if (Array.isArray(secondMap)) {\r\n                for (var i = 0, c = secondMap.length; i < c; i++) {\r\n                    let newList = document.createElement('ul'),\r\n                        newDiv = document.createElement('code'),\r\n                        newListItem = document.createElement('li');\r\n                    // Setting color\r\n                    newListItem.className = secondMap[i] + '-diff';\r\n                    if (\r\n                        typeof secondMap[i] === 'object'\r\n                        && secondMap[i] !== null\r\n                    ) {\r\n                        if (Array.isArray(secondMap[i])) {\r\n                            if (\r\n                                secondMap.damonInlineArrays !== undefined\r\n                                && secondMap.damonInlineArrays.indexOf(i) > -1\r\n                            ) {\r\n                                newDiv.innerHTML += '[';\r\n                                for (let j = 0, k = secondMap[i].length; j < k; j++) {\r\n                                    let valueSpan = document.createElement('span'),\r\n                                        value = secondMap[i][j];\r\n                                    if (value === true) {\r\n                                        valueSpan.textContent = \"true\";\r\n                                        valueSpan.className = \"type-boolean\";\r\n                                    } else if (value === false) {\r\n                                        valueSpan.textContent = \"false\";\r\n                                        valueSpan.className = \"type-boolean\";\r\n                                    } else if (value === null) {\r\n                                        valueSpan.textContent = \"null\";\r\n                                        valueSpan.className = \"type-null\";\r\n                                    } else if (\r\n                                        Number.isFinite(value)\r\n                                        && !Number.isNaN(value)\r\n                                    ) {\r\n                                        valueSpan.textContent = value + \"\";\r\n                                        valueSpan.className = \"type-number\";\r\n                                    } else {\r\n                                        if (safeHTML) {\r\n                                            if ($.websiteRegex.test(value)) {\r\n                                                let fullUrl = value;\r\n                                                if (!$.httpRegex.test(value))\r\n                                                    fullUrl = ('https://' + value);\r\n                                                valueSpan.innerHTML =\r\n                                                    DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                            } else {\r\n                                                valueSpan.innerHTML = `\"${value}\"`;\r\n                                            }\r\n                                        } else {\r\n                                            if ($.websiteRegex.test(value)) {\r\n                                                let fullUrl = value;\r\n                                                if (!$.httpRegex.test(value))\r\n                                                    fullUrl = ('https://' + value);\r\n                                                valueSpan.innerHTML =\r\n                                                    DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                            } else {\r\n                                                valueSpan.textContent = `\"${value}\"`;\r\n                                            }\r\n                                        }\r\n                                        valueSpan.className = \"type-string\";\r\n                                    }\r\n                                    if (j !== 0) {\r\n                                        newDiv.innerHTML += ', ';\r\n                                    }\r\n                                    newDiv.appendChild(valueSpan);\r\n                                }\r\n                                newDiv.innerHTML += ']';\r\n                                newListItem.appendChild(newDiv);\r\n                                newListItem.appendChild(newList);\r\n                                list.appendChild(newListItem);\r\n                            } else {\r\n                                newDiv.textContent = \"[]\";\r\n                                newListItem.appendChild(newDiv);\r\n                                newListItem.appendChild(newList);\r\n                                list.appendChild(newListItem);\r\n                                recurseSecondMap(secondMap[i], newList, path.concat([i]), color);\r\n                            }\r\n                        } else {\r\n                            newDiv.textContent = \"{}\";\r\n                            newListItem.appendChild(newDiv);\r\n                            newListItem.appendChild(newList);\r\n                            list.appendChild(newListItem);\r\n                            recurseSecondMap(secondMap[i], newList, path.concat([i]), color);\r\n                        }\r\n                    } else {\r\n                        let childText = secondMap[i];\r\n                        if (childText === true) {\r\n                            newDiv.textContent = \"true\";\r\n                            newDiv.className = \"type-boolean\";\r\n                        } else if (childText === false) {\r\n                            newDiv.textContent = \"false\";\r\n                            newDiv.className = \"type-boolean\";\r\n                        } else if (childText === null) {\r\n                            newDiv.textContent = \"null\";\r\n                            newDiv.className = \"type-null\";\r\n                        } else if (\r\n                            Number.isFinite(childText)\r\n                            && !Number.isNaN(childText)\r\n                        ) {\r\n                            newDiv.textContent = childText + \"\";\r\n                            newDiv.className = \"type-number\";\r\n                        } else {\r\n                            if (safeHTML) {\r\n                                if ($.websiteRegex.test(childText)) {\r\n                                    let fullUrl = childText;\r\n                                    if (!$.httpRegex.test(childText))\r\n                                        fullUrl = 'https://' + childText;\r\n                                    newDiv.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                } else {\r\n                                    newDiv.innerHTML = `\"${childText}\"`;\r\n                                }\r\n                            } else {\r\n                                if ($.websiteRegex.test(childText)) {\r\n                                    let fullUrl = childText;\r\n                                    if (!$.httpRegex.test(childText))\r\n                                        fullUrl = 'https://' + childText;\r\n                                    newDiv.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ fullUrl }\">\"${ fullUrl }\"</a>`);\r\n                                } else {\r\n                                    newDiv.textContent = `\"${childText}\"`;\r\n                                }\r\n                            }\r\n                            newDiv.className = \"type-string\";\r\n                        }\r\n                        newListItem.appendChild(newDiv);\r\n                        newListItem.appendChild(newList);\r\n                        list.appendChild(newListItem);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    damonTableToCSV(string) {\r\n        const $ = this;\r\n        let map = $.damon.damonToMap(string),\r\n            output = '';\r\n        let index = 0;\r\n        for (const [key, value] of map) {\r\n            if (index === 0 && key === '00') {\r\n                output += '\"' + value + '\"\\n';\r\n                index++;\r\n                continue;\r\n            }\r\n            let valueKeys = Array.from(value.keys());\r\n            for (let i = 0, c = valueKeys.length; i < c; i++) {\r\n                output += '\"' + valueKeys[i] + '\"';\r\n                if (i != (c - 1)) {\r\n                    output += ',';\r\n                }\r\n            }\r\n            output += '\\n';\r\n            index++;\r\n        }\r\n        return output.slice(0, -1);\r\n    }\r\n\r\n    csvToDamonTable(string) {\r\n            const $ = this;\r\n        let lines = string.split(\"\\n\"),\r\n            damonMap = new Map();\r\n        for (let i = 0, c = lines.length; i < c; i++) {\r\n            let rowMap = new Map();\r\n            rowMap.implicitNulls = [];\r\n            damonMap.set(i + \"\", rowMap);\r\n            let lineValues = lines[i].split(',');\r\n            for (let z = 0, x = lineValues.length; z < x; z++) {\r\n                if (lineValues[z][0] === '\"' && lineValues[z][lineValues[z].length - 1] === '\"') {\r\n                    try {\r\n                        damonMap.get(i + \"\").set(JSON.parse(lineValues[z]), null);\r\n                        damonMap.get(i + \"\").implicitNulls.push(lineValues[z]);\r\n                    } catch (error) {\r\n                        damonMap.get(i + \"\").set(\r\n                            JSON.parse(JSON.stringify(lineValues[z].slice(1, -1))),\r\n                            null\r\n                        );\r\n                        damonMap.get(i + \"\").implicitNulls.push(JSON.parse(JSON.stringify(lineValues[z].slice(1, -1))));\r\n                    }\r\n                } else {\r\n                    try {\r\n                        damonMap.get(i + \"\").set(JSON.parse(`\"${lineValues[z]}\"`), null);\r\n                        damonMap.get(i + \"\").implicitNulls.push(`\"${lineValues[z]}\"`);\r\n                    } catch (error) {\r\n                        damonMap.get(i + \"\").set(\r\n                            JSON.parse(JSON.stringify(lineValues[z])),\r\n                            null\r\n                        );\r\n                        damonMap.get(i + \"\").implicitNulls.push(JSON.stringify(lineValues[z]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return $.damon.mapToDamon(damonMap);\r\n    }\r\n};\r\n", "(function () {\r\n    window.DamonUtils = require('./DamonUtils.js');\r\n})();\r\n"],
  "mappings": "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",
  "names": ["freeze", "seal", "apply", "construct", "getGlobal", "_createTrustedTypesPolicy", "html", "_createHooksMap", "window", "document", "MUSTACHE_EXPR", "ERB_EXPR", "TMPLIT_EXPR", "DATA_ATTR", "ARIA_ATTR", "IS_SCRIPT_OR_DATA", "ATTR_WHITESPACE", "CUSTOM_ELEMENT", "isRegexOrFunction", "_parseConfig", "_checkValidNamespace", "_forceRemove", "_removeAttribute", "_initDocument", "_createNodeIterator", "_isClobbered", "_isNode", "hooks", "_sanitizeElements", "_isValidAttribute", "_isBasicCustomElement", "_sanitizeAttributes", "_sanitizeShadowDOM", "safeHTML", "recurse", "jsonMap", "valueSpan", "dataCell", "list", "i", "currentPath", "damonMap", "diffMap", "c", "secondMap"]
}
